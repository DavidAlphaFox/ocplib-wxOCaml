type wxCoord = int
type wxMappingMode = int
type wxRasterOperationMode = int
type wxLayoutDirection = int


class wxDC inherit wxObject begin

(*
  method(void,	CopyAttributes ( wxDC &dc)
 	Copy attributes from another DC. 
int 	GetDepth () 
 	Returns the depth (number of bits/pixel) of this DC. 
wxPoint 	GetDeviceOrigin () 
 	Returns the current device origin. 
wxRasterOperationMode 	GetLogicalFunction () 
 	Gets the current logical function. 
wxMappingMode 	GetMapMode () 
 	Gets the current mapping mode for the device context. 
bool 	GetPixel (wxCoord x, wxCoord y, wxColour *colour) 
 	Gets in colour the colour at the specified location. 
wxSize 	GetPPI () 
 	Returns the resolution of the device in pixels per inch. 
  method(void,	GetSize (wxCoord *width, wxCoord *height) 
 	Gets the horizontal and vertical extent of this device context in device units. 
wxSize 	GetSize () 
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	GetSizeMM (wxCoord *width, wxCoord *height) 
 	Returns the horizontal and vertical resolution in millimetres. 
wxSize 	GetSizeMM () 
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	GetUserScale (double *x, double *y) 
 	Gets the current user scale factor. 
bool 	IsOk () 
 	Returns true if the DC is ok to use. 
  method(void,	SetDeviceOrigin (wxCoord x, wxCoord y)
 	Sets the device origin (i.e., the origin in pixels after scaling has been applied). 

    method(void,SetLogicalFunction (wxRasterOperationMode function)
 	Sets the current logical function for the device context. 
  method(void,	SetPalette ( wxPalette &palette)
 	If this is a window DC or memory DC, assigns the given palette to the window or bitmap associated with the DC. 
  method(void,	SetLogicalScale (double x, double y)
  method(void,	GetLogicalScale (double *x, double *y) 
*)


  method(void, 	SetLogicalOrigin) (wxCoord x, wxCoord y)
  method(void, 	SetAxisOrientation) (bool xLeftRight, bool yBottomUp)
  method(void, 	SetUserScale) (double xScale, double yScale)
  method(void, 	SetMapMode) (wxMappingMode mode)
  method(wxCoord,DeviceToLogicalX) (wxCoord x) 
  method(wxCoord,DeviceToLogicalY) (wxCoord y) 

(*
  method(void,	GetLogicalOrigin (wxCoord *x, wxCoord *y) 
wxPoint 	GetLogicalOrigin () 
Coordinate conversion functions

wxCoord 	DeviceToLogicalXRel (wxCoord x) 
 	Convert device X coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. 
wxCoord 	DeviceToLogicalY (wxCoord y) 
 	Converts device Y coordinate to logical coordinate, using the current mapping mode, user scale factor, device origin and axis orientation. 
wxCoord 	DeviceToLogicalYRel (wxCoord y) 
 	Convert device Y coordinate to relative logical coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. 
wxCoord 	LogicalToDeviceX (wxCoord x) 
 	Converts logical X coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation. 
wxCoord 	LogicalToDeviceXRel (wxCoord x) 
 	Converts logical X coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. 
wxCoord 	LogicalToDeviceY (wxCoord y) 
 	Converts logical Y coordinate to device coordinate, using the current mapping mode, user scale factor, device origin and axis orientation. 
wxCoord 	LogicalToDeviceYRel (wxCoord y) 
 	Converts logical Y coordinate to relative device coordinate, using the current mapping mode and user scale factor but ignoring the axis orientation. 
Drawing functions
*)

  method(void,	Clear) ()
  method(void,	DrawArc, 
    DrawArcCoords) (wxCoord xStart, wxCoord yStart, wxCoord xEnd, wxCoord yEnd, wxCoord xc, wxCoord yc)
  method(void,	DrawArc) ( wxPoint &ptStart,  wxPoint &ptEnd,  wxPoint &centre)
  method(void,	DrawBitmap, DrawBitmapCoords)
    ( wxBitmap &bitmap, wxCoord x, wxCoord y, bool useMask (*=false*))
  method(void,	DrawBitmap) ( wxBitmap &bmp,  wxPoint &pt, bool useMask (*=false *))

(*
  method(void,	DrawCheckMark (wxCoord x, wxCoord y, wxCoord width, wxCoord height)
 	Draws a check mark inside the given rectangle. 
  method(void,	DrawCheckMark ( wxRect &rect)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawCircle (wxCoord x, wxCoord y, wxCoord radius)
 	Draws a circle with the given centre and radius. 
  method(void,	DrawCircle ( wxPoint &pt, wxCoord radius)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawEllipse (wxCoord x, wxCoord y, wxCoord width, wxCoord height)
 	Draws an ellipse contained in the rectangle specified either with the given top left corner and the given size or directly. 
  method(void,	DrawEllipse ( wxPoint &pt,  wxSize &size)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawEllipse ( wxRect &rect)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawEllipticArc (wxCoord x, wxCoord y, wxCoord width, wxCoord height, double start, double end)
 	Draws an arc of an ellipse. 
  method(void,	DrawEllipticArc ( wxPoint &pt,  wxSize &sz, double sa, double ea)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawIcon ( wxIcon &icon, wxCoord x, wxCoord y)
 	Draw an icon on the display (does nothing if the device context is PostScript). 
  method(void,	DrawIcon ( wxIcon &icon,  wxPoint &pt)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawLabel ( wxString &text,  wxBitmap &bitmap,  wxRect &rect, int alignment=wxALIGN_LEFT|wxALIGN_TOP, int indexAccel=-1, wxRect *rectBounding=NULL)
 	Draw optional bitmap and the text into the given rectangle and aligns it as specified by alignment parameter; it also will emphasize the character with the given index if it is != -1 and return the bounding rectangle if required. 
  method(void,	DrawLabel ( wxString &text,  wxRect &rect, int alignment=wxALIGN_LEFT|wxALIGN_TOP, int indexAccel=-1)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawLine (wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2)
 	Draws a line from the first point to the second. 
  method(void,	DrawLine ( wxPoint &pt1,  wxPoint &pt2)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawLines (int n, wxPoint points[], wxCoord xoffset=0, wxCoord yoffset=0)
 	Draws lines using an array of points of size n adding the optional offset coordinate. 
  method(void,	DrawLines ( wxPointList *points, wxCoord xoffset=0, wxCoord yoffset=0)
 	This method uses a list of wxPoints, adding the optional offset coordinate. 
  method(void,	DrawPoint (wxCoord x, wxCoord y)
 	Draws a point using the color of the current pen. 
  method(void,	DrawPoint ( wxPoint &pt)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawPolygon (int n, wxPoint points[], wxCoord xoffset=0, wxCoord yoffset=0, wxPolygonFillMode fill_style=wxODDEVEN_RULE)
 	Draws a filled polygon using an array of points of size n, adding the optional offset coordinate. 
  method(void,	DrawPolygon ( wxPointList *points, wxCoord xoffset=0, wxCoord yoffset=0, wxPolygonFillMode fill_style=wxODDEVEN_RULE)
 	This method draws a filled polygon using a list of wxPoints, adding the optional offset coordinate. 
  method(void,	DrawPolyPolygon (int n, int count[], wxPoint points[], wxCoord xoffset=0, wxCoord yoffset=0, wxPolygonFillMode fill_style=wxODDEVEN_RULE)
 	Draws two or more filled polygons using an array of points, adding the optional offset coordinates. 

  method(void,	DrawRectangle (wxCoord x, wxCoord y, wxCoord width, wxCoord height)
 	Draws a rectangle with the given top left corner, and with the given size. 
  method(void,	DrawRectangle ( wxPoint &pt,  wxSize &sz)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 

*)


	method(void, DrawRectangle, DrawRectangleRect) (wxRect &rect)

(*
  method(void,	DrawRotatedText ( wxString &text, wxCoord x, wxCoord y, double angle)
 	Draws the text rotated by angle degrees (positive angles are counterclockwise; the full angle is 360 degrees). 
  method(void,	DrawRotatedText ( wxString &text,  wxPoint &point, double angle)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawRoundedRectangle (wxCoord x, wxCoord y, wxCoord width, wxCoord height, double radius)
 	Draws a rectangle with the given top left corner, and with the given size. 
  method(void,	DrawRoundedRectangle ( wxPoint &pt,  wxSize &sz, double radius)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawRoundedRectangle ( wxRect &rect, double radius)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawSpline (int n, wxPoint points[])
 	Draws a spline between all given points using the current pen. 
  method(void,	DrawSpline ( wxPointList *points)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawSpline (wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2, wxCoord x3, wxCoord y3)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	DrawText ( wxString &text, wxCoord x, wxCoord y)
 	Draws a text string at the specified point, using the current text font, and the current text foreground and background colours. 
  method(void,	DrawText ( wxString &text,  wxPoint &pt)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	GradientFillConcentric ( wxRect &rect,  wxColour &initialColour,  wxColour &destColour)
 	Fill the area specified by rect with a radial gradient, starting from initialColour at the centre of the circle and fading to destColour on the circle outside. 
  method(void,	GradientFillConcentric ( wxRect &rect,  wxColour &initialColour,  wxColour &destColour,  wxPoint &circleCenter)
 	Fill the area specified by rect with a radial gradient, starting from initialColour at the centre of the circle and fading to destColour on the circle outside. 
  method(void,	GradientFillLinear ( wxRect &rect,  wxColour &initialColour,  wxColour &destColour, wxDirection nDirection=wxRIGHT)
 	Fill the area specified by rect with a linear gradient, starting from initialColour and eventually fading to destColour. 
bool 	FloodFill (wxCoord x, wxCoord y,  wxColour &colour, wxFloodFillStyle style=wxFLOOD_SURFACE)
 	Flood fills the device context starting from the given point, using the current brush colour, and using a style: 
bool 	FloodFill ( wxPoint &pt,  wxColour &col, wxFloodFillStyle style=wxFLOOD_SURFACE)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
  method(void,	CrossHair (wxCoord x, wxCoord y)
 	Displays a cross hair using the current pen. 
  method(void,	CrossHair ( wxPoint &pt)
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
Clipping region functions
*)

  method(void,	DestroyClippingRegion) ()
  method(void,	GetClippingBox) (wxCoord <-x, wxCoord <-y, wxCoord <-width, wxCoord <-height) 
  method(void,	SetClippingRegion, 
  SetClippingRegionCoords) (wxCoord x, wxCoord y, wxCoord width, wxCoord height)
  method(void,	SetClippingRegion) ( wxPoint &pt,  wxSize &sz)
  method(void,	SetClippingRegion, SetClippingRegionRect) ( wxRect &rect)
  method(void,	SetDeviceClippingRegion) ( wxRegion &region)
  method(wxCoord, 	GetCharHeight) () 
  method(wxCoord, 	GetCharWidth) () 

(*  
wxFontMetrics 	GetFontMetrics () 
 	Returns the various font characteristics. 
  method(void,	GetMultiLineTextExtent ( wxString &string, wxCoord *w, wxCoord *h, wxCoord *heightLine=NULL,  wxFont *font=NULL) 
 	Gets the dimensions of the string using the currently selected font. 
wxSize 	GetMultiLineTextExtent ( wxString &string) 
 	Gets the dimensions of the string using the currently selected font. 
bool 	GetPartialTextExtents ( wxString &text, wxArrayInt &widths) 
 	Fills the widths array with the widths from the beginning of text to the corresponding character of text. 
  method(void,	GetTextExtent ( wxString &string, wxCoord *w, wxCoord *h, wxCoord *descent=NULL, wxCoord *externalLeading=NULL,  wxFont *font=NULL) 
 	Gets the dimensions of the string using the currently selected font. 
wxSize 	GetTextExtent ( wxString &string) 
 	This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. 
Text properties functions
int 	GetBackgroundMode () 
 	Returns the current background mode: wxSOLID or wxTRANSPARENT. 
 wxFont & 	GetFont () 
 	Gets the current font. 
wxLayoutDirection 	GetLayoutDirection () 
 	Gets the current layout direction of the device context. 
 wxColour & 	GetTextBackground () 
 	Gets the current text background colour. 
 wxColour & 	GetTextForeground () 
 	Gets the current text foreground colour. 
*)

  method(void,	SetBackgroundMode) (int mode)
  method(void, 	SetFont) (wxFont &font)
  method(void, 	SetTextBackground) ( wxColour &colour)
  method(void, 	SetTextForeground) ( wxColour &colour)
  method(void, 	SetLayoutDirection) (wxLayoutDirection dir)
  method(void, 	CalcBoundingBox) (wxCoord x, wxCoord y)
  method(wxCoord, 	MaxX) () 
  method(wxCoord, 	MaxY) () 
  method(wxCoord, 	MinX) () 
  method(wxCoord, 	MinY) () 
  method(void, 	ResetBoundingBox) ()

  method(bool, 	StartDoc) ( wxString &message)
  method(void, 	StartPage) ()
  method(void,	EndDoc) ()
  method(void,	EndPage) ()

(*
Bit-Block Transfer operations (blit)
bool 	Blit (wxCoord xdest, wxCoord ydest, wxCoord width, wxCoord height, wxDC *source, wxCoord xsrc, wxCoord ysrc, wxRasterOperationMode logicalFunc=wxCOPY, bool useMask=false, wxCoord xsrcMask=wxDefaultCoord, wxCoord ysrcMask=wxDefaultCoord)
 	Copy from a source DC to this DC. 
bool 	StretchBlit (wxCoord xdest, wxCoord ydest, wxCoord dstWidth, wxCoord dstHeight, wxDC *source, wxCoord xsrc, wxCoord ysrc, wxCoord srcWidth, wxCoord srcHeight, wxRasterOperationMode logicalFunc=wxCOPY, bool useMask=false, wxCoord xsrcMask=wxDefaultCoord, wxCoord ysrcMask=wxDefaultCoord)
 	Copy from a source DC to this DC possibly changing the scale. 
*)
  method( wxBrush,	GetBackground) () 
  method( wxBrush, 	GetBrush) () 
  method( wxPen, 	GetPen) () 
  method(void,	SetBackground) ( wxBrush &brush)

   method(void, 	SetBrush) (wxBrush &brush)
   method(void, 	SetPen) (wxPen &pen)

    method(bool, 	CanUseTransformMatrix) () 
(*
bool 	SetTransformMatrix ( wxAffineMatrix2D &matrix)
 	Set the transformation matrix. 
wxAffineMatrix2D 	GetTransformMatrix () 
 	Return the transformation matrix used by this device context. 
  method(void,	ResetTransformMatrix ()
 	Revert the transformation matrix to identity matrix. 
*)
end
