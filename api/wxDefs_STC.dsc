
// For SciLexer.h
CONSTSELF( wxSTC_LEX_CONTAINER )
CONSTSELF( wxSTC_LEX_NULL )
CONSTSELF( wxSTC_LEX_PYTHON )
CONSTSELF( wxSTC_LEX_CPP )
CONSTSELF( wxSTC_LEX_HTML )
CONSTSELF( wxSTC_LEX_XML )
CONSTSELF( wxSTC_LEX_PERL )
CONSTSELF( wxSTC_LEX_SQL )
CONSTSELF( wxSTC_LEX_VB )
CONSTSELF( wxSTC_LEX_PROPERTIES )
CONSTSELF( wxSTC_LEX_ERRORLIST )
CONSTSELF( wxSTC_LEX_MAKEFILE )
CONSTSELF( wxSTC_LEX_BATCH )
CONSTSELF( wxSTC_LEX_XCODE )
CONSTSELF( wxSTC_LEX_LATEX )
CONSTSELF( wxSTC_LEX_LUA )
CONSTSELF( wxSTC_LEX_DIFF )
CONSTSELF( wxSTC_LEX_CONF )
CONSTSELF( wxSTC_LEX_PASCAL )
CONSTSELF( wxSTC_LEX_AVE )
CONSTSELF( wxSTC_LEX_ADA )
CONSTSELF( wxSTC_LEX_LISP )
CONSTSELF( wxSTC_LEX_RUBY )
CONSTSELF( wxSTC_LEX_EIFFEL )
CONSTSELF( wxSTC_LEX_EIFFELKW )
CONSTSELF( wxSTC_LEX_TCL )
CONSTSELF( wxSTC_LEX_NNCRONTAB )
CONSTSELF( wxSTC_LEX_BULLANT )
CONSTSELF( wxSTC_LEX_VBSCRIPT )
CONSTSELF( wxSTC_LEX_BAAN )
CONSTSELF( wxSTC_LEX_MATLAB )
CONSTSELF( wxSTC_LEX_SCRIPTOL )
CONSTSELF( wxSTC_LEX_ASM )
CONSTSELF( wxSTC_LEX_CPPNOCASE )
CONSTSELF( wxSTC_LEX_FORTRAN )
CONSTSELF( wxSTC_LEX_F77 )
CONSTSELF( wxSTC_LEX_CSS )
CONSTSELF( wxSTC_LEX_POV )
CONSTSELF( wxSTC_LEX_LOUT )
CONSTSELF( wxSTC_LEX_ESCRIPT )
CONSTSELF( wxSTC_LEX_PS )
CONSTSELF( wxSTC_LEX_NSIS )
CONSTSELF( wxSTC_LEX_MMIXAL )
CONSTSELF( wxSTC_LEX_CLW )
CONSTSELF( wxSTC_LEX_CLWNOCASE )
CONSTSELF( wxSTC_LEX_LOT )
CONSTSELF( wxSTC_LEX_YAML )
CONSTSELF( wxSTC_LEX_TEX )
CONSTSELF( wxSTC_LEX_METAPOST )
CONSTSELF( wxSTC_LEX_POWERBASIC )
CONSTSELF( wxSTC_LEX_FORTH )
CONSTSELF( wxSTC_LEX_ERLANG )
CONSTSELF( wxSTC_LEX_OCTAVE )
CONSTSELF( wxSTC_LEX_MSSQL )
CONSTSELF( wxSTC_LEX_VERILOG )
CONSTSELF( wxSTC_LEX_KIX )
CONSTSELF( wxSTC_LEX_GUI4CLI )
CONSTSELF( wxSTC_LEX_SPECMAN )
CONSTSELF( wxSTC_LEX_AU3 )
CONSTSELF( wxSTC_LEX_APDL )
CONSTSELF( wxSTC_LEX_BASH )
CONSTSELF( wxSTC_LEX_ASN1 )
CONSTSELF( wxSTC_LEX_VHDL )
CONSTSELF( wxSTC_LEX_CAML )
CONSTSELF( wxSTC_LEX_BLITZBASIC )
CONSTSELF( wxSTC_LEX_PUREBASIC )
CONSTSELF( wxSTC_LEX_HASKELL )
CONSTSELF( wxSTC_LEX_PHPSCRIPT )
CONSTSELF( wxSTC_LEX_TADS3 )
CONSTSELF( wxSTC_LEX_REBOL )
CONSTSELF( wxSTC_LEX_SMALLTALK )
CONSTSELF( wxSTC_LEX_FLAGSHIP )
CONSTSELF( wxSTC_LEX_CSOUND )
CONSTSELF( wxSTC_LEX_FREEBASIC )
CONSTSELF( wxSTC_LEX_INNOSETUP )
CONSTSELF( wxSTC_LEX_OPAL )
CONSTSELF( wxSTC_LEX_SPICE )
CONSTSELF( wxSTC_LEX_D )
CONSTSELF( wxSTC_LEX_CMAKE )
CONSTSELF( wxSTC_LEX_GAP )
CONSTSELF( wxSTC_LEX_PLM )
CONSTSELF( wxSTC_LEX_PROGRESS )
CONSTSELF( wxSTC_LEX_ABAQUS )
CONSTSELF( wxSTC_LEX_ASYMPTOTE )
CONSTSELF( wxSTC_LEX_R )
CONSTSELF( wxSTC_LEX_MAGIK )
CONSTSELF( wxSTC_LEX_POWERSHELL )
CONSTSELF( wxSTC_LEX_MYSQL )
CONSTSELF( wxSTC_LEX_PO )
CONSTSELF( wxSTC_LEX_TAL )
CONSTSELF( wxSTC_LEX_COBOL )
CONSTSELF( wxSTC_LEX_TACL )
CONSTSELF( wxSTC_LEX_SORCUS )
CONSTSELF( wxSTC_LEX_POWERPRO )
CONSTSELF( wxSTC_LEX_NIMROD )
CONSTSELF( wxSTC_LEX_SML )
CONSTSELF( wxSTC_LEX_MARKDOWN )


//----------------------------------------------------------------------
// STC constants generated section {{{

CONSTSELF( wxSTC_INVALID_POSITION )

// Define start of Scintilla messages to be greater than all Windows edit (EM_*) messages
// as many EM_ messages can be used although that use is deprecated.
CONSTSELF( wxSTC_START )
CONSTSELF( wxSTC_OPTIONAL_START )
CONSTSELF( wxSTC_LEXER_START )
CONSTSELF( wxSTC_WS_INVISIBLE )
CONSTSELF( wxSTC_WS_VISIBLEALWAYS )
CONSTSELF( wxSTC_WS_VISIBLEAFTERINDENT )
CONSTSELF( wxSTC_EOL_CRLF )
CONSTSELF( wxSTC_EOL_CR )
CONSTSELF( wxSTC_EOL_LF )

// The SC_CP_UTF8 value can be used to enter Unicode mode.
// This is the same value as CP_UTF8 in Windows
CONSTSELF( wxSTC_CP_UTF8 )

// The SC_CP_DBCS value can be used to indicate a DBCS mode for GTK+.
// CONSTSELF( wxSTC_CP_DBCS ) // not in 3.0
CONSTSELF( wxSTC_MARKER_MAX )
CONSTSELF( wxSTC_MARK_CIRCLE )
CONSTSELF( wxSTC_MARK_ROUNDRECT )
CONSTSELF( wxSTC_MARK_ARROW )
CONSTSELF( wxSTC_MARK_SMALLRECT )
CONSTSELF( wxSTC_MARK_SHORTARROW )
CONSTSELF( wxSTC_MARK_EMPTY )
CONSTSELF( wxSTC_MARK_ARROWDOWN )
CONSTSELF( wxSTC_MARK_MINUS )
CONSTSELF( wxSTC_MARK_PLUS )

// Shapes used for outlining column.
CONSTSELF( wxSTC_MARK_VLINE )
CONSTSELF( wxSTC_MARK_LCORNER )
CONSTSELF( wxSTC_MARK_TCORNER )
CONSTSELF( wxSTC_MARK_BOXPLUS )
CONSTSELF( wxSTC_MARK_BOXPLUSCONNECTED )
CONSTSELF( wxSTC_MARK_BOXMINUS )
CONSTSELF( wxSTC_MARK_BOXMINUSCONNECTED )
CONSTSELF( wxSTC_MARK_LCORNERCURVE )
CONSTSELF( wxSTC_MARK_TCORNERCURVE )
CONSTSELF( wxSTC_MARK_CIRCLEPLUS )
CONSTSELF( wxSTC_MARK_CIRCLEPLUSCONNECTED )
CONSTSELF( wxSTC_MARK_CIRCLEMINUS )
CONSTSELF( wxSTC_MARK_CIRCLEMINUSCONNECTED )

// Invisible mark that only sets the line background color.
CONSTSELF( wxSTC_MARK_BACKGROUND )
CONSTSELF( wxSTC_MARK_DOTDOTDOT )
CONSTSELF( wxSTC_MARK_ARROWS )
CONSTSELF( wxSTC_MARK_PIXMAP )
CONSTSELF( wxSTC_MARK_FULLRECT )
CONSTSELF( wxSTC_MARK_LEFTRECT )
CONSTSELF( wxSTC_MARK_AVAILABLE )
CONSTSELF( wxSTC_MARK_UNDERLINE )
CONSTSELF( wxSTC_MARK_CHARACTER )

// Markers used for outlining column.
CONSTSELF( wxSTC_MARKNUM_FOLDEREND )
CONSTSELF( wxSTC_MARKNUM_FOLDEROPENMID )
CONSTSELF( wxSTC_MARKNUM_FOLDERMIDTAIL )
CONSTSELF( wxSTC_MARKNUM_FOLDERTAIL )
CONSTSELF( wxSTC_MARKNUM_FOLDERSUB )
CONSTSELF( wxSTC_MARKNUM_FOLDER )
CONSTSELF( wxSTC_MARKNUM_FOLDEROPEN )
CONSTSELF( wxSTC_MASK_FOLDERS )
CONSTSELF( wxSTC_MARGIN_SYMBOL )
CONSTSELF( wxSTC_MARGIN_NUMBER )
CONSTSELF( wxSTC_MARGIN_BACK )
CONSTSELF( wxSTC_MARGIN_FORE )
CONSTSELF( wxSTC_MARGIN_TEXT )
CONSTSELF( wxSTC_MARGIN_RTEXT )

// Styles in range )..38 are predefined for parts of the UI and are not used as normal styles.
// Style ) is for future use.
CONSTSELF( wxSTC_STYLE_DEFAULT )
CONSTSELF( wxSTC_STYLE_LINENUMBER )
CONSTSELF( wxSTC_STYLE_BRACELIGHT )
CONSTSELF( wxSTC_STYLE_BRACEBAD )
CONSTSELF( wxSTC_STYLE_CONTROLCHAR )
CONSTSELF( wxSTC_STYLE_INDENTGUIDE )
CONSTSELF( wxSTC_STYLE_CALLTIP )
CONSTSELF( wxSTC_STYLE_LASTPREDEFINED )
CONSTSELF( wxSTC_STYLE_MAX )

// Character set identifiers are used in StyleSetCharacterSet.
// The values are the same as the Windows *_CHARSET values.
CONSTSELF( wxSTC_CHARSET_ANSI )
CONSTSELF( wxSTC_CHARSET_DEFAULT )
CONSTSELF( wxSTC_CHARSET_BALTIC )
CONSTSELF( wxSTC_CHARSET_CHINESEBIG5 )
CONSTSELF( wxSTC_CHARSET_EASTEUROPE )
CONSTSELF( wxSTC_CHARSET_GB2312 )
CONSTSELF( wxSTC_CHARSET_GREEK )
CONSTSELF( wxSTC_CHARSET_HANGUL )
CONSTSELF( wxSTC_CHARSET_MAC )
CONSTSELF( wxSTC_CHARSET_OEM )
CONSTSELF( wxSTC_CHARSET_RUSSIAN )
CONSTSELF( wxSTC_CHARSET_CYRILLIC )
CONSTSELF( wxSTC_CHARSET_SHIFTJIS )
CONSTSELF( wxSTC_CHARSET_SYMBOL )
CONSTSELF( wxSTC_CHARSET_TURKISH )
CONSTSELF( wxSTC_CHARSET_JOHAB )
CONSTSELF( wxSTC_CHARSET_HEBREW )
CONSTSELF( wxSTC_CHARSET_ARABIC )
CONSTSELF( wxSTC_CHARSET_VIETNAMESE )
CONSTSELF( wxSTC_CHARSET_THAI )
CONSTSELF( wxSTC_CHARSET_8859_15 )
CONSTSELF( wxSTC_CASE_MIXED )
CONSTSELF( wxSTC_CASE_UPPER )
CONSTSELF( wxSTC_CASE_LOWER )

// Indicator style enumeration and some constants
CONSTSELF( wxSTC_INDIC_PLAIN )
CONSTSELF( wxSTC_INDIC_SQUIGGLE )
CONSTSELF( wxSTC_INDIC_TT )
CONSTSELF( wxSTC_INDIC_DIAGONAL )
CONSTSELF( wxSTC_INDIC_STRIKE )
CONSTSELF( wxSTC_INDIC_HIDDEN )
CONSTSELF( wxSTC_INDIC_BOX )
CONSTSELF( wxSTC_INDIC_ROUNDBOX )
CONSTSELF( wxSTC_INDIC_MAX )
CONSTSELF( wxSTC_INDIC_CONTAINER )
CONSTSELF( wxSTC_INDIC0_MASK )
CONSTSELF( wxSTC_INDIC1_MASK )
CONSTSELF( wxSTC_INDIC2_MASK )
CONSTSELF( wxSTC_INDICS_MASK )
CONSTSELF( wxSTC_IV_NONE )
CONSTSELF( wxSTC_IV_REAL )
CONSTSELF( wxSTC_IV_LOOKFORWARD )
CONSTSELF( wxSTC_IV_LOOKBOTH )

// PrintColourMode - use same colours as screen.
CONSTSELF( wxSTC_PRINT_NORMAL )

// PrintColourMode - invert the light value of each style for printing.
CONSTSELF( wxSTC_PRINT_INVERTLIGHT )

// PrintColourMode - force black text on white background for printing.
CONSTSELF( wxSTC_PRINT_BLACKONWHITE )

// PrintColourMode - text stays coloured, but all background is forced to be white for printing.
CONSTSELF( wxSTC_PRINT_COLOURONWHITE )

// PrintColourMode - only the default-background is forced to be white for printing.
CONSTSELF( wxSTC_PRINT_COLOURONWHITEDEFAULTBG )
CONSTSELF( wxSTC_FIND_WHOLEWORD )
CONSTSELF( wxSTC_FIND_MATCHCASE )
CONSTSELF( wxSTC_FIND_WORDSTART )
CONSTSELF( wxSTC_FIND_REGEXP )
CONSTSELF( wxSTC_FIND_POSIX )
CONSTSELF( wxSTC_FOLDLEVELBASE )
CONSTSELF( wxSTC_FOLDLEVELWHITEFLAG )
CONSTSELF( wxSTC_FOLDLEVELHEADERFLAG )
CONSTSELF( wxSTC_FOLDLEVELNUMBERMASK )
CONSTSELF( wxSTC_FOLDFLAG_LINEBEFORE_EXPANDED )
CONSTSELF( wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED )
CONSTSELF( wxSTC_FOLDFLAG_LINEAFTER_EXPANDED )
CONSTSELF( wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED )
CONSTSELF( wxSTC_FOLDFLAG_LEVELNUMBERS )
CONSTSELF( wxSTC_TIME_FOREVER )
CONSTSELF( wxSTC_WRAP_NONE )
CONSTSELF( wxSTC_WRAP_WORD )
CONSTSELF( wxSTC_WRAP_CHAR )
CONSTSELF( wxSTC_WRAPVISUALFLAG_NONE )
CONSTSELF( wxSTC_WRAPVISUALFLAG_END )
CONSTSELF( wxSTC_WRAPVISUALFLAG_START )
CONSTSELF( wxSTC_WRAPVISUALFLAGLOC_DEFAULT )
CONSTSELF( wxSTC_WRAPVISUALFLAGLOC_END_BY_TEXT )
CONSTSELF( wxSTC_WRAPVISUALFLAGLOC_START_BY_TEXT )
CONSTSELF( wxSTC_WRAPINDENT_FIXED )
CONSTSELF( wxSTC_WRAPINDENT_SAME )
CONSTSELF( wxSTC_WRAPINDENT_INDENT )
CONSTSELF( wxSTC_CACHE_NONE )
CONSTSELF( wxSTC_CACHE_CARET )
CONSTSELF( wxSTC_CACHE_PAGE )
CONSTSELF( wxSTC_CACHE_DOCUMENT )

// Control font anti-aliasing.
CONSTSELF( wxSTC_EFF_QUALITY_MASK )
CONSTSELF( wxSTC_EFF_QUALITY_DEFAULT )
CONSTSELF( wxSTC_EFF_QUALITY_NON_ANTIALIASED )
CONSTSELF( wxSTC_EFF_QUALITY_ANTIALIASED )
CONSTSELF( wxSTC_EFF_QUALITY_LCD_OPTIMIZED )
CONSTSELF( wxSTC_EDGE_NONE )
CONSTSELF( wxSTC_EDGE_LINE )
CONSTSELF( wxSTC_EDGE_BACKGROUND )
CONSTSELF( wxSTC_STATUS_OK )
CONSTSELF( wxSTC_STATUS_FAILURE )
CONSTSELF( wxSTC_STATUS_BADALLOC )
CONSTSELF( wxSTC_CURSORNORMAL )
CONSTSELF( wxSTC_CURSORWAIT )

// Constants for use with SetVisiblePolicy, similar to SetCaretPolicy.
CONSTSELF( wxSTC_VISIBLE_SLOP )
CONSTSELF( wxSTC_VISIBLE_STRICT )

// Caret policy, used by SetXCaretPolicy and SetYCaretPolicy.
// If CARET_SLOP is set, we can define a slop value: caretSlop.
// This value defines an unwanted zone (UZ) where the caret is... unwanted.
// This zone is defined as a number of pixels near the vertical margins,
// and as a number of lines near the horizontal margins.
// By keeping the caret away from the edges, it is seen within its context,
// so it is likely that the identifier that the caret is on can be completely seen,
// and that the current line is seen with some of the lines following it which are
// often dependent on that line.
CONSTSELF( wxSTC_CARET_SLOP )

// If CARET_STRICT is set, the policy is enforced... strictly.
// The caret is centred on the display if slop is not set,
// and cannot go in the UZ if slop is set.
CONSTSELF( wxSTC_CARET_STRICT )

// If CARET_JUMPS is set, the display is moved more energetically
// so the caret can move in the same direction longer before the policy is applied again.
CONSTSELF( wxSTC_CARET_JUMPS )

// If CARET_EVEN is not set, instead of having symmetrical UZs,
// the left and bottom UZs are extended up to right and top UZs respectively.
// This way, we favour the displaying of useful information: the begining of lines,
// where most code reside, and the lines after the caret, eg. the body of a function.
CONSTSELF( wxSTC_CARET_EVEN )
CONSTSELF( wxSTC_SEL_STREAM )
CONSTSELF( wxSTC_SEL_RECTANGLE )
CONSTSELF( wxSTC_SEL_LINES )
CONSTSELF( wxSTC_SEL_THIN )
CONSTSELF( wxSTC_ALPHA_TRANSPARENT )
CONSTSELF( wxSTC_ALPHA_OPAQUE )
CONSTSELF( wxSTC_ALPHA_NOALPHA )
CONSTSELF( wxSTC_CARETSTYLE_INVISIBLE )
CONSTSELF( wxSTC_CARETSTYLE_LINE )
CONSTSELF( wxSTC_CARETSTYLE_BLOCK )
CONSTSELF( wxSTC_ANNOTATION_HIDDEN )
CONSTSELF( wxSTC_ANNOTATION_STANDARD )
CONSTSELF( wxSTC_ANNOTATION_BOXED )
CONSTSELF( wxSTC_UNDO_MAY_COALESCE )
CONSTSELF( wxSTC_SCVS_NONE )
CONSTSELF( wxSTC_SCVS_RECTANGULARSELECTION )
CONSTSELF( wxSTC_SCVS_USERACCESSIBLE )

// Maximum value of keywordSet parameter of SetKeyWords.
CONSTSELF( wxSTC_KEYWORDSET_MAX )

// Notifications
// Type of modification and the action which caused the modification.
// These are defined as a bit mask to make it easy to specify which notifications are wanted.
// One bit is set from each of SC_MOD_* and SC_PERFORMED_*.
CONSTSELF( wxSTC_MOD_INSERTTEXT )
CONSTSELF( wxSTC_MOD_DELETETEXT )
CONSTSELF( wxSTC_MOD_CHANGESTYLE )
CONSTSELF( wxSTC_MOD_CHANGEFOLD )
CONSTSELF( wxSTC_PERFORMED_USER )
CONSTSELF( wxSTC_PERFORMED_UNDO )
CONSTSELF( wxSTC_PERFORMED_REDO )
CONSTSELF( wxSTC_MULTISTEPUNDOREDO )
CONSTSELF( wxSTC_LASTSTEPINUNDOREDO )
CONSTSELF( wxSTC_MOD_CHANGEMARKER )
CONSTSELF( wxSTC_MOD_BEFOREINSERT )
CONSTSELF( wxSTC_MOD_BEFOREDELETE )
CONSTSELF( wxSTC_MULTILINEUNDOREDO )
CONSTSELF( wxSTC_STARTACTION )
CONSTSELF( wxSTC_MOD_CHANGEINDICATOR )
CONSTSELF( wxSTC_MOD_CHANGELINESTATE )
CONSTSELF( wxSTC_MOD_CHANGEMARGIN )
CONSTSELF( wxSTC_MOD_CHANGEANNOTATION )
CONSTSELF( wxSTC_MOD_CONTAINER )
CONSTSELF( wxSTC_MODEVENTMASKALL )

// Symbolic key codes and modifier flags.
// ASCII and other printable characters below ).
// Extended keys above ).
CONSTSELF( wxSTC_KEY_DOWN )
CONSTSELF( wxSTC_KEY_UP )
CONSTSELF( wxSTC_KEY_LEFT )
CONSTSELF( wxSTC_KEY_RIGHT )
CONSTSELF( wxSTC_KEY_HOME )
CONSTSELF( wxSTC_KEY_END )
CONSTSELF( wxSTC_KEY_PRIOR )
CONSTSELF( wxSTC_KEY_NEXT )
CONSTSELF( wxSTC_KEY_DELETE )
CONSTSELF( wxSTC_KEY_INSERT )
CONSTSELF( wxSTC_KEY_ESCAPE )
CONSTSELF( wxSTC_KEY_BACK )
CONSTSELF( wxSTC_KEY_TAB )
CONSTSELF( wxSTC_KEY_RETURN )
CONSTSELF( wxSTC_KEY_ADD )
CONSTSELF( wxSTC_KEY_SUBTRACT )
CONSTSELF( wxSTC_KEY_DIVIDE )
CONSTSELF( wxSTC_KEY_WIN )
CONSTSELF( wxSTC_KEY_RWIN )
CONSTSELF( wxSTC_KEY_MENU )
CONSTSELF( wxSTC_SCMOD_NORM )
CONSTSELF( wxSTC_SCMOD_SHIFT )
CONSTSELF( wxSTC_SCMOD_CTRL )
CONSTSELF( wxSTC_SCMOD_ALT )
CONSTSELF( wxSTC_SCMOD_SUPER )

// When a lexer specifies its language as SCLEX_AUTOMATIC it receives a
// value assigned in sequence from SCLEX_AUTOMATIC+1.
CONSTSELF( wxSTC_LEX_AUTOMATIC )

// Lexical states for SCLEX_PYTHON
CONSTSELF( wxSTC_P_DEFAULT )
CONSTSELF( wxSTC_P_COMMENTLINE )
CONSTSELF( wxSTC_P_NUMBER )
CONSTSELF( wxSTC_P_STRING )
CONSTSELF( wxSTC_P_CHARACTER )
CONSTSELF( wxSTC_P_WORD )
CONSTSELF( wxSTC_P_TRIPLE )
CONSTSELF( wxSTC_P_TRIPLEDOUBLE )
CONSTSELF( wxSTC_P_CLASSNAME )
CONSTSELF( wxSTC_P_DEFNAME )
CONSTSELF( wxSTC_P_OPERATOR )
CONSTSELF( wxSTC_P_IDENTIFIER )
CONSTSELF( wxSTC_P_COMMENTBLOCK )
CONSTSELF( wxSTC_P_STRINGEOL )
CONSTSELF( wxSTC_P_WORD2 )
CONSTSELF( wxSTC_P_DECORATOR )

// Lexical states for SCLEX_CPP
CONSTSELF( wxSTC_C_DEFAULT )
CONSTSELF( wxSTC_C_COMMENT )
CONSTSELF( wxSTC_C_COMMENTLINE )
CONSTSELF( wxSTC_C_COMMENTDOC )
CONSTSELF( wxSTC_C_NUMBER )
CONSTSELF( wxSTC_C_WORD )
CONSTSELF( wxSTC_C_STRING )
CONSTSELF( wxSTC_C_CHARACTER )
CONSTSELF( wxSTC_C_UUID )
CONSTSELF( wxSTC_C_PREPROCESSOR )
CONSTSELF( wxSTC_C_OPERATOR )
CONSTSELF( wxSTC_C_IDENTIFIER )
CONSTSELF( wxSTC_C_STRINGEOL )
CONSTSELF( wxSTC_C_VERBATIM )
CONSTSELF( wxSTC_C_REGEX )
CONSTSELF( wxSTC_C_COMMENTLINEDOC )
CONSTSELF( wxSTC_C_WORD2 )
CONSTSELF( wxSTC_C_COMMENTDOCKEYWORD )
CONSTSELF( wxSTC_C_COMMENTDOCKEYWORDERROR )
CONSTSELF( wxSTC_C_GLOBALCLASS )

// Lexical states for SCLEX_D
CONSTSELF( wxSTC_D_DEFAULT )
CONSTSELF( wxSTC_D_COMMENT )
CONSTSELF( wxSTC_D_COMMENTLINE )
CONSTSELF( wxSTC_D_COMMENTDOC )
CONSTSELF( wxSTC_D_COMMENTNESTED )
CONSTSELF( wxSTC_D_NUMBER )
CONSTSELF( wxSTC_D_WORD )
CONSTSELF( wxSTC_D_WORD2 )
CONSTSELF( wxSTC_D_WORD3 )
CONSTSELF( wxSTC_D_TYPEDEF )
CONSTSELF( wxSTC_D_STRING )
CONSTSELF( wxSTC_D_STRINGEOL )
CONSTSELF( wxSTC_D_CHARACTER )
CONSTSELF( wxSTC_D_OPERATOR )
CONSTSELF( wxSTC_D_IDENTIFIER )
CONSTSELF( wxSTC_D_COMMENTLINEDOC )
CONSTSELF( wxSTC_D_COMMENTDOCKEYWORD )
CONSTSELF( wxSTC_D_COMMENTDOCKEYWORDERROR )
CONSTSELF( wxSTC_D_STRINGB )
CONSTSELF( wxSTC_D_STRINGR )
CONSTSELF( wxSTC_D_WORD5 )
CONSTSELF( wxSTC_D_WORD6 )
CONSTSELF( wxSTC_D_WORD7 )

// Lexical states for SCLEX_TCL
CONSTSELF( wxSTC_TCL_DEFAULT )
CONSTSELF( wxSTC_TCL_COMMENT )
CONSTSELF( wxSTC_TCL_COMMENTLINE )
CONSTSELF( wxSTC_TCL_NUMBER )
CONSTSELF( wxSTC_TCL_WORD_IN_QUOTE )
CONSTSELF( wxSTC_TCL_IN_QUOTE )
CONSTSELF( wxSTC_TCL_OPERATOR )
CONSTSELF( wxSTC_TCL_IDENTIFIER )
CONSTSELF( wxSTC_TCL_SUBSTITUTION )
CONSTSELF( wxSTC_TCL_SUB_BRACE )
CONSTSELF( wxSTC_TCL_MODIFIER )
CONSTSELF( wxSTC_TCL_EXPAND )
CONSTSELF( wxSTC_TCL_WORD )
CONSTSELF( wxSTC_TCL_WORD2 )
CONSTSELF( wxSTC_TCL_WORD3 )
CONSTSELF( wxSTC_TCL_WORD4 )
CONSTSELF( wxSTC_TCL_WORD5 )
CONSTSELF( wxSTC_TCL_WORD6 )
CONSTSELF( wxSTC_TCL_WORD7 )
CONSTSELF( wxSTC_TCL_WORD8 )
CONSTSELF( wxSTC_TCL_COMMENT_BOX )
CONSTSELF( wxSTC_TCL_BLOCK_COMMENT )

// Lexical states for SCLEX_HTML, SCLEX_XML
CONSTSELF( wxSTC_H_DEFAULT )
CONSTSELF( wxSTC_H_TAG )
CONSTSELF( wxSTC_H_TAGUNKNOWN )
CONSTSELF( wxSTC_H_ATTRIBUTE )
CONSTSELF( wxSTC_H_ATTRIBUTEUNKNOWN )
CONSTSELF( wxSTC_H_NUMBER )
CONSTSELF( wxSTC_H_DOUBLESTRING )
CONSTSELF( wxSTC_H_SINGLESTRING )
CONSTSELF( wxSTC_H_OTHER )
CONSTSELF( wxSTC_H_COMMENT )
CONSTSELF( wxSTC_H_ENTITY )

// XML and ASP
CONSTSELF( wxSTC_H_TAGEND )
CONSTSELF( wxSTC_H_XMLSTART )
CONSTSELF( wxSTC_H_XMLEND )
CONSTSELF( wxSTC_H_SCRIPT )
CONSTSELF( wxSTC_H_ASP )
CONSTSELF( wxSTC_H_ASPAT )
CONSTSELF( wxSTC_H_CDATA )
CONSTSELF( wxSTC_H_QUESTION )

// More HTML
CONSTSELF( wxSTC_H_VALUE )

// X-Code
CONSTSELF( wxSTC_H_XCCOMMENT )

// SGML
CONSTSELF( wxSTC_H_SGML_DEFAULT )
CONSTSELF( wxSTC_H_SGML_COMMAND )
CONSTSELF( wxSTC_H_SGML_1ST_PARAM )
CONSTSELF( wxSTC_H_SGML_DOUBLESTRING )
CONSTSELF( wxSTC_H_SGML_SIMPLESTRING )
CONSTSELF( wxSTC_H_SGML_ERROR )
CONSTSELF( wxSTC_H_SGML_SPECIAL )
CONSTSELF( wxSTC_H_SGML_ENTITY )
CONSTSELF( wxSTC_H_SGML_COMMENT )
CONSTSELF( wxSTC_H_SGML_1ST_PARAM_COMMENT )
CONSTSELF( wxSTC_H_SGML_BLOCK_DEFAULT )

// Embedded Javascript
CONSTSELF( wxSTC_HJ_START )
CONSTSELF( wxSTC_HJ_DEFAULT )
CONSTSELF( wxSTC_HJ_COMMENT )
CONSTSELF( wxSTC_HJ_COMMENTLINE )
CONSTSELF( wxSTC_HJ_COMMENTDOC )
CONSTSELF( wxSTC_HJ_NUMBER )
CONSTSELF( wxSTC_HJ_WORD )
CONSTSELF( wxSTC_HJ_KEYWORD )
CONSTSELF( wxSTC_HJ_DOUBLESTRING )
CONSTSELF( wxSTC_HJ_SINGLESTRING )
CONSTSELF( wxSTC_HJ_SYMBOLS )
CONSTSELF( wxSTC_HJ_STRINGEOL )
CONSTSELF( wxSTC_HJ_REGEX )

// ASP Javascript
CONSTSELF( wxSTC_HJA_START )
CONSTSELF( wxSTC_HJA_DEFAULT )
CONSTSELF( wxSTC_HJA_COMMENT )
CONSTSELF( wxSTC_HJA_COMMENTLINE )
CONSTSELF( wxSTC_HJA_COMMENTDOC )
CONSTSELF( wxSTC_HJA_NUMBER )
CONSTSELF( wxSTC_HJA_WORD )
CONSTSELF( wxSTC_HJA_KEYWORD )
CONSTSELF( wxSTC_HJA_DOUBLESTRING )
CONSTSELF( wxSTC_HJA_SINGLESTRING )
CONSTSELF( wxSTC_HJA_SYMBOLS )
CONSTSELF( wxSTC_HJA_STRINGEOL )
CONSTSELF( wxSTC_HJA_REGEX )

// Embedded VBScript
CONSTSELF( wxSTC_HB_START )
CONSTSELF( wxSTC_HB_DEFAULT )
CONSTSELF( wxSTC_HB_COMMENTLINE )
CONSTSELF( wxSTC_HB_NUMBER )
CONSTSELF( wxSTC_HB_WORD )
CONSTSELF( wxSTC_HB_STRING )
CONSTSELF( wxSTC_HB_IDENTIFIER )
CONSTSELF( wxSTC_HB_STRINGEOL )

// ASP VBScript
CONSTSELF( wxSTC_HBA_START )
CONSTSELF( wxSTC_HBA_DEFAULT )
CONSTSELF( wxSTC_HBA_COMMENTLINE )
CONSTSELF( wxSTC_HBA_NUMBER )
CONSTSELF( wxSTC_HBA_WORD )
CONSTSELF( wxSTC_HBA_STRING )
CONSTSELF( wxSTC_HBA_IDENTIFIER )
CONSTSELF( wxSTC_HBA_STRINGEOL )

// Embedded Python
CONSTSELF( wxSTC_HP_START )
CONSTSELF( wxSTC_HP_DEFAULT )
CONSTSELF( wxSTC_HP_COMMENTLINE )
CONSTSELF( wxSTC_HP_NUMBER )
CONSTSELF( wxSTC_HP_STRING )
CONSTSELF( wxSTC_HP_CHARACTER )
CONSTSELF( wxSTC_HP_WORD )
CONSTSELF( wxSTC_HP_TRIPLE )
CONSTSELF( wxSTC_HP_TRIPLEDOUBLE )
CONSTSELF( wxSTC_HP_CLASSNAME )
CONSTSELF( wxSTC_HP_DEFNAME )
CONSTSELF( wxSTC_HP_OPERATOR )
CONSTSELF( wxSTC_HP_IDENTIFIER )

// PHP
CONSTSELF( wxSTC_HPHP_COMPLEX_VARIABLE )

// ASP Python
CONSTSELF( wxSTC_HPA_START )
CONSTSELF( wxSTC_HPA_DEFAULT )
CONSTSELF( wxSTC_HPA_COMMENTLINE )
CONSTSELF( wxSTC_HPA_NUMBER )
CONSTSELF( wxSTC_HPA_STRING )
CONSTSELF( wxSTC_HPA_CHARACTER )
CONSTSELF( wxSTC_HPA_WORD )
CONSTSELF( wxSTC_HPA_TRIPLE )
CONSTSELF( wxSTC_HPA_TRIPLEDOUBLE )
CONSTSELF( wxSTC_HPA_CLASSNAME )
CONSTSELF( wxSTC_HPA_DEFNAME )
CONSTSELF( wxSTC_HPA_OPERATOR )
CONSTSELF( wxSTC_HPA_IDENTIFIER )

// PHP
CONSTSELF( wxSTC_HPHP_DEFAULT )
CONSTSELF( wxSTC_HPHP_HSTRING )
CONSTSELF( wxSTC_HPHP_SIMPLESTRING )
CONSTSELF( wxSTC_HPHP_WORD )
CONSTSELF( wxSTC_HPHP_NUMBER )
CONSTSELF( wxSTC_HPHP_VARIABLE )
CONSTSELF( wxSTC_HPHP_COMMENT )
CONSTSELF( wxSTC_HPHP_COMMENTLINE )
CONSTSELF( wxSTC_HPHP_HSTRING_VARIABLE )
CONSTSELF( wxSTC_HPHP_OPERATOR )

// Lexical states for SCLEX_PERL
CONSTSELF( wxSTC_PL_DEFAULT )
CONSTSELF( wxSTC_PL_ERROR )
CONSTSELF( wxSTC_PL_COMMENTLINE )
CONSTSELF( wxSTC_PL_POD )
CONSTSELF( wxSTC_PL_NUMBER )
CONSTSELF( wxSTC_PL_WORD )
CONSTSELF( wxSTC_PL_STRING )
CONSTSELF( wxSTC_PL_CHARACTER )
CONSTSELF( wxSTC_PL_PUNCTUATION )
CONSTSELF( wxSTC_PL_PREPROCESSOR )
CONSTSELF( wxSTC_PL_OPERATOR )
CONSTSELF( wxSTC_PL_IDENTIFIER )
CONSTSELF( wxSTC_PL_SCALAR )
CONSTSELF( wxSTC_PL_ARRAY )
CONSTSELF( wxSTC_PL_HASH )
CONSTSELF( wxSTC_PL_SYMBOLTABLE )
CONSTSELF( wxSTC_PL_VARIABLE_INDEXER )
CONSTSELF( wxSTC_PL_REGEX )
CONSTSELF( wxSTC_PL_REGSUBST )
CONSTSELF( wxSTC_PL_LONGQUOTE )
CONSTSELF( wxSTC_PL_BACKTICKS )
CONSTSELF( wxSTC_PL_DATASECTION )
CONSTSELF( wxSTC_PL_HERE_DELIM )
CONSTSELF( wxSTC_PL_HERE_Q )
CONSTSELF( wxSTC_PL_HERE_QQ )
CONSTSELF( wxSTC_PL_HERE_QX )
CONSTSELF( wxSTC_PL_STRING_Q )
CONSTSELF( wxSTC_PL_STRING_QQ )
CONSTSELF( wxSTC_PL_STRING_QX )
CONSTSELF( wxSTC_PL_STRING_QR )
CONSTSELF( wxSTC_PL_STRING_QW )
CONSTSELF( wxSTC_PL_POD_VERB )
CONSTSELF( wxSTC_PL_SUB_PROTOTYPE )
CONSTSELF( wxSTC_PL_FORMAT_IDENT )
CONSTSELF( wxSTC_PL_FORMAT )

// Lexical states for SCLEX_RUBY
CONSTSELF( wxSTC_RB_DEFAULT )
CONSTSELF( wxSTC_RB_ERROR )
CONSTSELF( wxSTC_RB_COMMENTLINE )
CONSTSELF( wxSTC_RB_POD )
CONSTSELF( wxSTC_RB_NUMBER )
CONSTSELF( wxSTC_RB_WORD )
CONSTSELF( wxSTC_RB_STRING )
CONSTSELF( wxSTC_RB_CHARACTER )
CONSTSELF( wxSTC_RB_CLASSNAME )
CONSTSELF( wxSTC_RB_DEFNAME )
CONSTSELF( wxSTC_RB_OPERATOR )
CONSTSELF( wxSTC_RB_IDENTIFIER )
CONSTSELF( wxSTC_RB_REGEX )
CONSTSELF( wxSTC_RB_GLOBAL )
CONSTSELF( wxSTC_RB_SYMBOL )
CONSTSELF( wxSTC_RB_MODULE_NAME )
CONSTSELF( wxSTC_RB_INSTANCE_VAR )
CONSTSELF( wxSTC_RB_CLASS_VAR )
CONSTSELF( wxSTC_RB_BACKTICKS )
CONSTSELF( wxSTC_RB_DATASECTION )
CONSTSELF( wxSTC_RB_HERE_DELIM )
CONSTSELF( wxSTC_RB_HERE_Q )
CONSTSELF( wxSTC_RB_HERE_QQ )
CONSTSELF( wxSTC_RB_HERE_QX )
CONSTSELF( wxSTC_RB_STRING_Q )
CONSTSELF( wxSTC_RB_STRING_QQ )
CONSTSELF( wxSTC_RB_STRING_QX )
CONSTSELF( wxSTC_RB_STRING_QR )
CONSTSELF( wxSTC_RB_STRING_QW )
CONSTSELF( wxSTC_RB_WORD_DEMOTED )
CONSTSELF( wxSTC_RB_STDIN )
CONSTSELF( wxSTC_RB_STDOUT )
CONSTSELF( wxSTC_RB_STDERR )
CONSTSELF( wxSTC_RB_UPPER_BOUND )

// Lexical states for SCLEX_VB, SCLEX_VBSCRIPT, SCLEX_POWERBASIC
CONSTSELF( wxSTC_B_DEFAULT )
CONSTSELF( wxSTC_B_COMMENT )
CONSTSELF( wxSTC_B_NUMBER )
CONSTSELF( wxSTC_B_KEYWORD )
CONSTSELF( wxSTC_B_STRING )
CONSTSELF( wxSTC_B_PREPROCESSOR )
CONSTSELF( wxSTC_B_OPERATOR )
CONSTSELF( wxSTC_B_IDENTIFIER )
CONSTSELF( wxSTC_B_DATE )
CONSTSELF( wxSTC_B_STRINGEOL )
CONSTSELF( wxSTC_B_KEYWORD2 )
CONSTSELF( wxSTC_B_KEYWORD3 )
CONSTSELF( wxSTC_B_KEYWORD4 )
CONSTSELF( wxSTC_B_CONSTANT )
CONSTSELF( wxSTC_B_ASM )
CONSTSELF( wxSTC_B_LABEL )
CONSTSELF( wxSTC_B_ERROR )
CONSTSELF( wxSTC_B_HEXNUMBER )
CONSTSELF( wxSTC_B_BINNUMBER )

// Lexical states for SCLEX_PROPERTIES
CONSTSELF( wxSTC_PROPS_DEFAULT )
CONSTSELF( wxSTC_PROPS_COMMENT )
CONSTSELF( wxSTC_PROPS_SECTION )
CONSTSELF( wxSTC_PROPS_ASSIGNMENT )
CONSTSELF( wxSTC_PROPS_DEFVAL )
CONSTSELF( wxSTC_PROPS_KEY )

// Lexical states for SCLEX_LATEX
CONSTSELF( wxSTC_L_DEFAULT )
CONSTSELF( wxSTC_L_COMMAND )
CONSTSELF( wxSTC_L_TAG )
CONSTSELF( wxSTC_L_MATH )
CONSTSELF( wxSTC_L_COMMENT )

// Lexical states for SCLEX_LUA
CONSTSELF( wxSTC_LUA_DEFAULT )
CONSTSELF( wxSTC_LUA_COMMENT )
CONSTSELF( wxSTC_LUA_COMMENTLINE )
CONSTSELF( wxSTC_LUA_COMMENTDOC )
CONSTSELF( wxSTC_LUA_NUMBER )
CONSTSELF( wxSTC_LUA_WORD )
CONSTSELF( wxSTC_LUA_STRING )
CONSTSELF( wxSTC_LUA_CHARACTER )
CONSTSELF( wxSTC_LUA_LITERALSTRING )
CONSTSELF( wxSTC_LUA_PREPROCESSOR )
CONSTSELF( wxSTC_LUA_OPERATOR )
CONSTSELF( wxSTC_LUA_IDENTIFIER )
CONSTSELF( wxSTC_LUA_STRINGEOL )
CONSTSELF( wxSTC_LUA_WORD2 )
CONSTSELF( wxSTC_LUA_WORD3 )
CONSTSELF( wxSTC_LUA_WORD4 )
CONSTSELF( wxSTC_LUA_WORD5 )
CONSTSELF( wxSTC_LUA_WORD6 )
CONSTSELF( wxSTC_LUA_WORD7 )
CONSTSELF( wxSTC_LUA_WORD8 )

// Lexical states for SCLEX_ERRORLIST
CONSTSELF( wxSTC_ERR_DEFAULT )
CONSTSELF( wxSTC_ERR_PYTHON )
CONSTSELF( wxSTC_ERR_GCC )
CONSTSELF( wxSTC_ERR_MS )
CONSTSELF( wxSTC_ERR_CMD )
CONSTSELF( wxSTC_ERR_BORLAND )
CONSTSELF( wxSTC_ERR_PERL )
CONSTSELF( wxSTC_ERR_NET )
CONSTSELF( wxSTC_ERR_LUA )
CONSTSELF( wxSTC_ERR_CTAG )
CONSTSELF( wxSTC_ERR_DIFF_CHANGED )
CONSTSELF( wxSTC_ERR_DIFF_ADDITION )
CONSTSELF( wxSTC_ERR_DIFF_DELETION )
CONSTSELF( wxSTC_ERR_DIFF_MESSAGE )
CONSTSELF( wxSTC_ERR_PHP )
CONSTSELF( wxSTC_ERR_ELF )
CONSTSELF( wxSTC_ERR_IFC )
CONSTSELF( wxSTC_ERR_IFORT )
CONSTSELF( wxSTC_ERR_ABSF )
CONSTSELF( wxSTC_ERR_TIDY )
CONSTSELF( wxSTC_ERR_JAVA_STACK )
CONSTSELF( wxSTC_ERR_VALUE )

// Lexical states for SCLEX_BATCH
CONSTSELF( wxSTC_BAT_DEFAULT )
CONSTSELF( wxSTC_BAT_COMMENT )
CONSTSELF( wxSTC_BAT_WORD )
CONSTSELF( wxSTC_BAT_LABEL )
CONSTSELF( wxSTC_BAT_HIDE )
CONSTSELF( wxSTC_BAT_COMMAND )
CONSTSELF( wxSTC_BAT_IDENTIFIER )
CONSTSELF( wxSTC_BAT_OPERATOR )

// Lexical states for SCLEX_MAKEFILE
CONSTSELF( wxSTC_MAKE_DEFAULT )
CONSTSELF( wxSTC_MAKE_COMMENT )
CONSTSELF( wxSTC_MAKE_PREPROCESSOR )
CONSTSELF( wxSTC_MAKE_IDENTIFIER )
CONSTSELF( wxSTC_MAKE_OPERATOR )
CONSTSELF( wxSTC_MAKE_TARGET )
CONSTSELF( wxSTC_MAKE_IDEOL )

// Lexical states for SCLEX_DIFF
CONSTSELF( wxSTC_DIFF_DEFAULT )
CONSTSELF( wxSTC_DIFF_COMMENT )
CONSTSELF( wxSTC_DIFF_COMMAND )
CONSTSELF( wxSTC_DIFF_HEADER )
CONSTSELF( wxSTC_DIFF_POSITION )
CONSTSELF( wxSTC_DIFF_DELETED )
CONSTSELF( wxSTC_DIFF_ADDED )
CONSTSELF( wxSTC_DIFF_CHANGED )

// Lexical states for SCLEX_CONF (Apache Configuration Files Lexer)
CONSTSELF( wxSTC_CONF_DEFAULT )
CONSTSELF( wxSTC_CONF_COMMENT )
CONSTSELF( wxSTC_CONF_NUMBER )
CONSTSELF( wxSTC_CONF_IDENTIFIER )
CONSTSELF( wxSTC_CONF_EXTENSION )
CONSTSELF( wxSTC_CONF_PARAMETER )
CONSTSELF( wxSTC_CONF_STRING )
CONSTSELF( wxSTC_CONF_OPERATOR )
CONSTSELF( wxSTC_CONF_IP )
CONSTSELF( wxSTC_CONF_DIRECTIVE )

// Lexical states for SCLEX_AVE, Avenue
CONSTSELF( wxSTC_AVE_DEFAULT )
CONSTSELF( wxSTC_AVE_COMMENT )
CONSTSELF( wxSTC_AVE_NUMBER )
CONSTSELF( wxSTC_AVE_WORD )
CONSTSELF( wxSTC_AVE_STRING )
CONSTSELF( wxSTC_AVE_ENUM )
CONSTSELF( wxSTC_AVE_STRINGEOL )
CONSTSELF( wxSTC_AVE_IDENTIFIER )
CONSTSELF( wxSTC_AVE_OPERATOR )
CONSTSELF( wxSTC_AVE_WORD1 )
CONSTSELF( wxSTC_AVE_WORD2 )
CONSTSELF( wxSTC_AVE_WORD3 )
CONSTSELF( wxSTC_AVE_WORD4 )
CONSTSELF( wxSTC_AVE_WORD5 )
CONSTSELF( wxSTC_AVE_WORD6 )

// Lexical states for SCLEX_ADA
CONSTSELF( wxSTC_ADA_DEFAULT )
CONSTSELF( wxSTC_ADA_WORD )
CONSTSELF( wxSTC_ADA_IDENTIFIER )
CONSTSELF( wxSTC_ADA_NUMBER )
CONSTSELF( wxSTC_ADA_DELIMITER )
CONSTSELF( wxSTC_ADA_CHARACTER )
CONSTSELF( wxSTC_ADA_CHARACTEREOL )
CONSTSELF( wxSTC_ADA_STRING )
CONSTSELF( wxSTC_ADA_STRINGEOL )
CONSTSELF( wxSTC_ADA_LABEL )
CONSTSELF( wxSTC_ADA_COMMENTLINE )
CONSTSELF( wxSTC_ADA_ILLEGAL )

// Lexical states for SCLEX_BAAN
CONSTSELF( wxSTC_BAAN_DEFAULT )
CONSTSELF( wxSTC_BAAN_COMMENT )
CONSTSELF( wxSTC_BAAN_COMMENTDOC )
CONSTSELF( wxSTC_BAAN_NUMBER )
CONSTSELF( wxSTC_BAAN_WORD )
CONSTSELF( wxSTC_BAAN_STRING )
CONSTSELF( wxSTC_BAAN_PREPROCESSOR )
CONSTSELF( wxSTC_BAAN_OPERATOR )
CONSTSELF( wxSTC_BAAN_IDENTIFIER )
CONSTSELF( wxSTC_BAAN_STRINGEOL )
CONSTSELF( wxSTC_BAAN_WORD2 )

// Lexical states for SCLEX_LISP
CONSTSELF( wxSTC_LISP_DEFAULT )
CONSTSELF( wxSTC_LISP_COMMENT )
CONSTSELF( wxSTC_LISP_NUMBER )
CONSTSELF( wxSTC_LISP_KEYWORD )
CONSTSELF( wxSTC_LISP_KEYWORD_KW )
CONSTSELF( wxSTC_LISP_SYMBOL )
CONSTSELF( wxSTC_LISP_STRING )
CONSTSELF( wxSTC_LISP_STRINGEOL )
CONSTSELF( wxSTC_LISP_IDENTIFIER )
CONSTSELF( wxSTC_LISP_OPERATOR )
CONSTSELF( wxSTC_LISP_SPECIAL )
CONSTSELF( wxSTC_LISP_MULTI_COMMENT )

// Lexical states for SCLEX_EIFFEL and SCLEX_EIFFELKW
CONSTSELF( wxSTC_EIFFEL_DEFAULT )
CONSTSELF( wxSTC_EIFFEL_COMMENTLINE )
CONSTSELF( wxSTC_EIFFEL_NUMBER )
CONSTSELF( wxSTC_EIFFEL_WORD )
CONSTSELF( wxSTC_EIFFEL_STRING )
CONSTSELF( wxSTC_EIFFEL_CHARACTER )
CONSTSELF( wxSTC_EIFFEL_OPERATOR )
CONSTSELF( wxSTC_EIFFEL_IDENTIFIER )
CONSTSELF( wxSTC_EIFFEL_STRINGEOL )

// Lexical states for SCLEX_NNCRONTAB (nnCron crontab Lexer)
CONSTSELF( wxSTC_NNCRONTAB_DEFAULT )
CONSTSELF( wxSTC_NNCRONTAB_COMMENT )
CONSTSELF( wxSTC_NNCRONTAB_TASK )
CONSTSELF( wxSTC_NNCRONTAB_SECTION )
CONSTSELF( wxSTC_NNCRONTAB_KEYWORD )
CONSTSELF( wxSTC_NNCRONTAB_MODIFIER )
CONSTSELF( wxSTC_NNCRONTAB_ASTERISK )
CONSTSELF( wxSTC_NNCRONTAB_NUMBER )
CONSTSELF( wxSTC_NNCRONTAB_STRING )
CONSTSELF( wxSTC_NNCRONTAB_ENVIRONMENT )
CONSTSELF( wxSTC_NNCRONTAB_IDENTIFIER )

// Lexical states for SCLEX_FORTH (Forth Lexer)
CONSTSELF( wxSTC_FORTH_DEFAULT )
CONSTSELF( wxSTC_FORTH_COMMENT )
CONSTSELF( wxSTC_FORTH_COMMENT_ML )
CONSTSELF( wxSTC_FORTH_IDENTIFIER )
CONSTSELF( wxSTC_FORTH_CONTROL )
CONSTSELF( wxSTC_FORTH_KEYWORD )
CONSTSELF( wxSTC_FORTH_DEFWORD )
CONSTSELF( wxSTC_FORTH_PREWORD1 )
CONSTSELF( wxSTC_FORTH_PREWORD2 )
CONSTSELF( wxSTC_FORTH_NUMBER )
CONSTSELF( wxSTC_FORTH_STRING )
CONSTSELF( wxSTC_FORTH_LOCALE )

// Lexical states for SCLEX_MATLAB
CONSTSELF( wxSTC_MATLAB_DEFAULT )
CONSTSELF( wxSTC_MATLAB_COMMENT )
CONSTSELF( wxSTC_MATLAB_COMMAND )
CONSTSELF( wxSTC_MATLAB_NUMBER )
CONSTSELF( wxSTC_MATLAB_KEYWORD )

// single quoted string
CONSTSELF( wxSTC_MATLAB_STRING )
CONSTSELF( wxSTC_MATLAB_OPERATOR )
CONSTSELF( wxSTC_MATLAB_IDENTIFIER )
CONSTSELF( wxSTC_MATLAB_DOUBLEQUOTESTRING )

// Lexical states for SCLEX_SCRIPTOL
CONSTSELF( wxSTC_SCRIPTOL_DEFAULT )
CONSTSELF( wxSTC_SCRIPTOL_WHITE )
CONSTSELF( wxSTC_SCRIPTOL_COMMENTLINE )
CONSTSELF( wxSTC_SCRIPTOL_PERSISTENT )
CONSTSELF( wxSTC_SCRIPTOL_CSTYLE )
CONSTSELF( wxSTC_SCRIPTOL_COMMENTBLOCK )
CONSTSELF( wxSTC_SCRIPTOL_NUMBER )
CONSTSELF( wxSTC_SCRIPTOL_STRING )
CONSTSELF( wxSTC_SCRIPTOL_CHARACTER )
CONSTSELF( wxSTC_SCRIPTOL_STRINGEOL )
CONSTSELF( wxSTC_SCRIPTOL_KEYWORD )
CONSTSELF( wxSTC_SCRIPTOL_OPERATOR )
CONSTSELF( wxSTC_SCRIPTOL_IDENTIFIER )
CONSTSELF( wxSTC_SCRIPTOL_TRIPLE )
CONSTSELF( wxSTC_SCRIPTOL_CLASSNAME )
CONSTSELF( wxSTC_SCRIPTOL_PREPROCESSOR )

// Lexical states for SCLEX_ASM
CONSTSELF( wxSTC_ASM_DEFAULT )
CONSTSELF( wxSTC_ASM_COMMENT )
CONSTSELF( wxSTC_ASM_NUMBER )
CONSTSELF( wxSTC_ASM_STRING )
CONSTSELF( wxSTC_ASM_OPERATOR )
CONSTSELF( wxSTC_ASM_IDENTIFIER )
CONSTSELF( wxSTC_ASM_CPUINSTRUCTION )
CONSTSELF( wxSTC_ASM_MATHINSTRUCTION )
CONSTSELF( wxSTC_ASM_REGISTER )
CONSTSELF( wxSTC_ASM_DIRECTIVE )
CONSTSELF( wxSTC_ASM_DIRECTIVEOPERAND )
CONSTSELF( wxSTC_ASM_COMMENTBLOCK )
CONSTSELF( wxSTC_ASM_CHARACTER )
CONSTSELF( wxSTC_ASM_STRINGEOL )
CONSTSELF( wxSTC_ASM_EXTINSTRUCTION )

// Lexical states for SCLEX_FORTRAN
CONSTSELF( wxSTC_F_DEFAULT )
CONSTSELF( wxSTC_F_COMMENT )
CONSTSELF( wxSTC_F_NUMBER )
CONSTSELF( wxSTC_F_STRING1 )
CONSTSELF( wxSTC_F_STRING2 )
CONSTSELF( wxSTC_F_STRINGEOL )
CONSTSELF( wxSTC_F_OPERATOR )
CONSTSELF( wxSTC_F_IDENTIFIER )
CONSTSELF( wxSTC_F_WORD )
CONSTSELF( wxSTC_F_WORD2 )
CONSTSELF( wxSTC_F_WORD3 )
CONSTSELF( wxSTC_F_PREPROCESSOR )
CONSTSELF( wxSTC_F_OPERATOR2 )
CONSTSELF( wxSTC_F_LABEL )
CONSTSELF( wxSTC_F_CONTINUATION )

// Lexical states for SCLEX_CSS
CONSTSELF( wxSTC_CSS_DEFAULT )
CONSTSELF( wxSTC_CSS_TAG )
CONSTSELF( wxSTC_CSS_CLASS )
CONSTSELF( wxSTC_CSS_PSEUDOCLASS )
CONSTSELF( wxSTC_CSS_UNKNOWN_PSEUDOCLASS )
CONSTSELF( wxSTC_CSS_OPERATOR )
CONSTSELF( wxSTC_CSS_IDENTIFIER )
CONSTSELF( wxSTC_CSS_UNKNOWN_IDENTIFIER )
CONSTSELF( wxSTC_CSS_VALUE )
CONSTSELF( wxSTC_CSS_COMMENT )
CONSTSELF( wxSTC_CSS_ID )
CONSTSELF( wxSTC_CSS_IMPORTANT )
CONSTSELF( wxSTC_CSS_DIRECTIVE )
CONSTSELF( wxSTC_CSS_DOUBLESTRING )
CONSTSELF( wxSTC_CSS_SINGLESTRING )
CONSTSELF( wxSTC_CSS_IDENTIFIER2 )
CONSTSELF( wxSTC_CSS_ATTRIBUTE )
CONSTSELF( wxSTC_CSS_IDENTIFIER3 )
CONSTSELF( wxSTC_CSS_PSEUDOELEMENT )
CONSTSELF( wxSTC_CSS_EXTENDED_IDENTIFIER )
CONSTSELF( wxSTC_CSS_EXTENDED_PSEUDOCLASS )
CONSTSELF( wxSTC_CSS_EXTENDED_PSEUDOELEMENT )

// Lexical states for SCLEX_POV
CONSTSELF( wxSTC_POV_DEFAULT )
CONSTSELF( wxSTC_POV_COMMENT )
CONSTSELF( wxSTC_POV_COMMENTLINE )
CONSTSELF( wxSTC_POV_NUMBER )
CONSTSELF( wxSTC_POV_OPERATOR )
CONSTSELF( wxSTC_POV_IDENTIFIER )
CONSTSELF( wxSTC_POV_STRING )
CONSTSELF( wxSTC_POV_STRINGEOL )
CONSTSELF( wxSTC_POV_DIRECTIVE )
CONSTSELF( wxSTC_POV_BADDIRECTIVE )
CONSTSELF( wxSTC_POV_WORD2 )
CONSTSELF( wxSTC_POV_WORD3 )
CONSTSELF( wxSTC_POV_WORD4 )
CONSTSELF( wxSTC_POV_WORD5 )
CONSTSELF( wxSTC_POV_WORD6 )
CONSTSELF( wxSTC_POV_WORD7 )
CONSTSELF( wxSTC_POV_WORD8 )

// Lexical states for SCLEX_LOUT
CONSTSELF( wxSTC_LOUT_DEFAULT )
CONSTSELF( wxSTC_LOUT_COMMENT )
CONSTSELF( wxSTC_LOUT_NUMBER )
CONSTSELF( wxSTC_LOUT_WORD )
CONSTSELF( wxSTC_LOUT_WORD2 )
CONSTSELF( wxSTC_LOUT_WORD3 )
CONSTSELF( wxSTC_LOUT_WORD4 )
CONSTSELF( wxSTC_LOUT_STRING )
CONSTSELF( wxSTC_LOUT_OPERATOR )
CONSTSELF( wxSTC_LOUT_IDENTIFIER )
CONSTSELF( wxSTC_LOUT_STRINGEOL )

// Lexical states for SCLEX_ESCRIPT
CONSTSELF( wxSTC_ESCRIPT_DEFAULT )
CONSTSELF( wxSTC_ESCRIPT_COMMENT )
CONSTSELF( wxSTC_ESCRIPT_COMMENTLINE )
CONSTSELF( wxSTC_ESCRIPT_COMMENTDOC )
CONSTSELF( wxSTC_ESCRIPT_NUMBER )
CONSTSELF( wxSTC_ESCRIPT_WORD )
CONSTSELF( wxSTC_ESCRIPT_STRING )
CONSTSELF( wxSTC_ESCRIPT_OPERATOR )
CONSTSELF( wxSTC_ESCRIPT_IDENTIFIER )
CONSTSELF( wxSTC_ESCRIPT_BRACE )
CONSTSELF( wxSTC_ESCRIPT_WORD2 )
CONSTSELF( wxSTC_ESCRIPT_WORD3 )

// Lexical states for SCLEX_PS
CONSTSELF( wxSTC_PS_DEFAULT )
CONSTSELF( wxSTC_PS_COMMENT )
CONSTSELF( wxSTC_PS_DSC_COMMENT )
CONSTSELF( wxSTC_PS_DSC_VALUE )
CONSTSELF( wxSTC_PS_NUMBER )
CONSTSELF( wxSTC_PS_NAME )
CONSTSELF( wxSTC_PS_KEYWORD )
CONSTSELF( wxSTC_PS_LITERAL )
CONSTSELF( wxSTC_PS_IMMEVAL )
CONSTSELF( wxSTC_PS_PAREN_ARRAY )
CONSTSELF( wxSTC_PS_PAREN_DICT )
CONSTSELF( wxSTC_PS_PAREN_PROC )
CONSTSELF( wxSTC_PS_TEXT )
CONSTSELF( wxSTC_PS_HEXSTRING )
CONSTSELF( wxSTC_PS_BASE85STRING )
CONSTSELF( wxSTC_PS_BADSTRINGCHAR )

// Lexical states for SCLEX_NSIS
CONSTSELF( wxSTC_NSIS_DEFAULT )
CONSTSELF( wxSTC_NSIS_COMMENT )
CONSTSELF( wxSTC_NSIS_STRINGDQ )
CONSTSELF( wxSTC_NSIS_STRINGLQ )
CONSTSELF( wxSTC_NSIS_STRINGRQ )
CONSTSELF( wxSTC_NSIS_FUNCTION )
CONSTSELF( wxSTC_NSIS_VARIABLE )
CONSTSELF( wxSTC_NSIS_LABEL )
CONSTSELF( wxSTC_NSIS_USERDEFINED )
CONSTSELF( wxSTC_NSIS_SECTIONDEF )
CONSTSELF( wxSTC_NSIS_SUBSECTIONDEF )
CONSTSELF( wxSTC_NSIS_IFDEFINEDEF )
CONSTSELF( wxSTC_NSIS_MACRODEF )
CONSTSELF( wxSTC_NSIS_STRINGVAR )
CONSTSELF( wxSTC_NSIS_NUMBER )
CONSTSELF( wxSTC_NSIS_SECTIONGROUP )
CONSTSELF( wxSTC_NSIS_PAGEEX )
CONSTSELF( wxSTC_NSIS_FUNCTIONDEF )
CONSTSELF( wxSTC_NSIS_COMMENTBOX )

// Lexical states for SCLEX_MMIXAL
CONSTSELF( wxSTC_MMIXAL_LEADWS )
CONSTSELF( wxSTC_MMIXAL_COMMENT )
CONSTSELF( wxSTC_MMIXAL_LABEL )
CONSTSELF( wxSTC_MMIXAL_OPCODE )
CONSTSELF( wxSTC_MMIXAL_OPCODE_PRE )
CONSTSELF( wxSTC_MMIXAL_OPCODE_VALID )
CONSTSELF( wxSTC_MMIXAL_OPCODE_UNKNOWN )
CONSTSELF( wxSTC_MMIXAL_OPCODE_POST )
CONSTSELF( wxSTC_MMIXAL_OPERANDS )
CONSTSELF( wxSTC_MMIXAL_NUMBER )
CONSTSELF( wxSTC_MMIXAL_REF )
CONSTSELF( wxSTC_MMIXAL_CHAR )
CONSTSELF( wxSTC_MMIXAL_STRING )
CONSTSELF( wxSTC_MMIXAL_REGISTER )
CONSTSELF( wxSTC_MMIXAL_HEX )
CONSTSELF( wxSTC_MMIXAL_OPERATOR )
CONSTSELF( wxSTC_MMIXAL_SYMBOL )
CONSTSELF( wxSTC_MMIXAL_INCLUDE )

// Lexical states for SCLEX_CLW
CONSTSELF( wxSTC_CLW_DEFAULT )
CONSTSELF( wxSTC_CLW_LABEL )
CONSTSELF( wxSTC_CLW_COMMENT )
CONSTSELF( wxSTC_CLW_STRING )
CONSTSELF( wxSTC_CLW_USER_IDENTIFIER )
CONSTSELF( wxSTC_CLW_INTEGER_CONSTANT )
CONSTSELF( wxSTC_CLW_REAL_CONSTANT )
CONSTSELF( wxSTC_CLW_PICTURE_STRING )
CONSTSELF( wxSTC_CLW_KEYWORD )
CONSTSELF( wxSTC_CLW_COMPILER_DIRECTIVE )
CONSTSELF( wxSTC_CLW_RUNTIME_EXPRESSIONS )
CONSTSELF( wxSTC_CLW_BUILTIN_PROCEDURES_FUNCTION )
CONSTSELF( wxSTC_CLW_STRUCTURE_DATA_TYPE )
CONSTSELF( wxSTC_CLW_ATTRIBUTE )
CONSTSELF( wxSTC_CLW_STANDARD_EQUATE )
CONSTSELF( wxSTC_CLW_ERROR )
CONSTSELF( wxSTC_CLW_DEPRECATED )

// Lexical states for SCLEX_LOT
CONSTSELF( wxSTC_LOT_DEFAULT )
CONSTSELF( wxSTC_LOT_HEADER )
CONSTSELF( wxSTC_LOT_BREAK )
CONSTSELF( wxSTC_LOT_SET )
CONSTSELF( wxSTC_LOT_PASS )
CONSTSELF( wxSTC_LOT_FAIL )
CONSTSELF( wxSTC_LOT_ABORT )

// Lexical states for SCLEX_YAML
CONSTSELF( wxSTC_YAML_DEFAULT )
CONSTSELF( wxSTC_YAML_COMMENT )
CONSTSELF( wxSTC_YAML_IDENTIFIER )
CONSTSELF( wxSTC_YAML_KEYWORD )
CONSTSELF( wxSTC_YAML_NUMBER )
CONSTSELF( wxSTC_YAML_REFERENCE )
CONSTSELF( wxSTC_YAML_DOCUMENT )
CONSTSELF( wxSTC_YAML_TEXT )
CONSTSELF( wxSTC_YAML_ERROR )
CONSTSELF( wxSTC_YAML_OPERATOR )

// Lexical states for SCLEX_TEX
CONSTSELF( wxSTC_TEX_DEFAULT )
CONSTSELF( wxSTC_TEX_SPECIAL )
CONSTSELF( wxSTC_TEX_GROUP )
CONSTSELF( wxSTC_TEX_SYMBOL )
CONSTSELF( wxSTC_TEX_COMMAND )
CONSTSELF( wxSTC_TEX_TEXT )
CONSTSELF( wxSTC_METAPOST_DEFAULT )
CONSTSELF( wxSTC_METAPOST_SPECIAL )
CONSTSELF( wxSTC_METAPOST_GROUP )
CONSTSELF( wxSTC_METAPOST_SYMBOL )
CONSTSELF( wxSTC_METAPOST_COMMAND )
CONSTSELF( wxSTC_METAPOST_TEXT )
CONSTSELF( wxSTC_METAPOST_EXTRA )

// Lexical states for SCLEX_ERLANG
CONSTSELF( wxSTC_ERLANG_DEFAULT )
CONSTSELF( wxSTC_ERLANG_COMMENT )
CONSTSELF( wxSTC_ERLANG_VARIABLE )
CONSTSELF( wxSTC_ERLANG_NUMBER )
CONSTSELF( wxSTC_ERLANG_KEYWORD )
CONSTSELF( wxSTC_ERLANG_STRING )
CONSTSELF( wxSTC_ERLANG_OPERATOR )
CONSTSELF( wxSTC_ERLANG_ATOM )
CONSTSELF( wxSTC_ERLANG_FUNCTION_NAME )
CONSTSELF( wxSTC_ERLANG_CHARACTER )
CONSTSELF( wxSTC_ERLANG_MACRO )
CONSTSELF( wxSTC_ERLANG_RECORD )
CONSTSELF( wxSTC_ERLANG_PREPROC )
CONSTSELF( wxSTC_ERLANG_NODE_NAME )
CONSTSELF( wxSTC_ERLANG_COMMENT_FUNCTION )
CONSTSELF( wxSTC_ERLANG_COMMENT_MODULE )
CONSTSELF( wxSTC_ERLANG_COMMENT_DOC )
CONSTSELF( wxSTC_ERLANG_COMMENT_DOC_MACRO )
CONSTSELF( wxSTC_ERLANG_ATOM_QUOTED )
CONSTSELF( wxSTC_ERLANG_MACRO_QUOTED )
CONSTSELF( wxSTC_ERLANG_RECORD_QUOTED )
CONSTSELF( wxSTC_ERLANG_NODE_NAME_QUOTED )
CONSTSELF( wxSTC_ERLANG_BIFS )
CONSTSELF( wxSTC_ERLANG_MODULES )
CONSTSELF( wxSTC_ERLANG_MODULES_ATT )
CONSTSELF( wxSTC_ERLANG_UNKNOWN )

// Lexical states for SCLEX_OCTAVE are identical to MatLab
// Lexical states for SCLEX_MSSQL
CONSTSELF( wxSTC_MSSQL_DEFAULT )
CONSTSELF( wxSTC_MSSQL_COMMENT )
CONSTSELF( wxSTC_MSSQL_LINE_COMMENT )
CONSTSELF( wxSTC_MSSQL_NUMBER )
CONSTSELF( wxSTC_MSSQL_STRING )
CONSTSELF( wxSTC_MSSQL_OPERATOR )
CONSTSELF( wxSTC_MSSQL_IDENTIFIER )
CONSTSELF( wxSTC_MSSQL_VARIABLE )
CONSTSELF( wxSTC_MSSQL_COLUMN_NAME )
CONSTSELF( wxSTC_MSSQL_STATEMENT )
CONSTSELF( wxSTC_MSSQL_DATATYPE )
CONSTSELF( wxSTC_MSSQL_SYSTABLE )
CONSTSELF( wxSTC_MSSQL_GLOBAL_VARIABLE )
CONSTSELF( wxSTC_MSSQL_FUNCTION )
CONSTSELF( wxSTC_MSSQL_STORED_PROCEDURE )
CONSTSELF( wxSTC_MSSQL_DEFAULT_PREF_DATATYPE )
CONSTSELF( wxSTC_MSSQL_COLUMN_NAME_2 )

// Lexical states for SCLEX_VERILOG
CONSTSELF( wxSTC_V_DEFAULT )
CONSTSELF( wxSTC_V_COMMENT )
CONSTSELF( wxSTC_V_COMMENTLINE )
CONSTSELF( wxSTC_V_COMMENTLINEBANG )
CONSTSELF( wxSTC_V_NUMBER )
CONSTSELF( wxSTC_V_WORD )
CONSTSELF( wxSTC_V_STRING )
CONSTSELF( wxSTC_V_WORD2 )
CONSTSELF( wxSTC_V_WORD3 )
CONSTSELF( wxSTC_V_PREPROCESSOR )
CONSTSELF( wxSTC_V_OPERATOR )
CONSTSELF( wxSTC_V_IDENTIFIER )
CONSTSELF( wxSTC_V_STRINGEOL )
CONSTSELF( wxSTC_V_USER )

// Lexical states for SCLEX_KIX
CONSTSELF( wxSTC_KIX_DEFAULT )
CONSTSELF( wxSTC_KIX_COMMENT )
CONSTSELF( wxSTC_KIX_STRING1 )
CONSTSELF( wxSTC_KIX_STRING2 )
CONSTSELF( wxSTC_KIX_NUMBER )
CONSTSELF( wxSTC_KIX_VAR )
CONSTSELF( wxSTC_KIX_MACRO )
CONSTSELF( wxSTC_KIX_KEYWORD )
CONSTSELF( wxSTC_KIX_FUNCTIONS )
CONSTSELF( wxSTC_KIX_OPERATOR )
CONSTSELF( wxSTC_KIX_IDENTIFIER )

// Lexical states for SCLEX_GUI4CLI
CONSTSELF( wxSTC_GC_DEFAULT )
CONSTSELF( wxSTC_GC_COMMENTLINE )
CONSTSELF( wxSTC_GC_COMMENTBLOCK )
CONSTSELF( wxSTC_GC_GLOBAL )
CONSTSELF( wxSTC_GC_EVENT )
CONSTSELF( wxSTC_GC_ATTRIBUTE )
CONSTSELF( wxSTC_GC_CONTROL )
CONSTSELF( wxSTC_GC_COMMAND )
CONSTSELF( wxSTC_GC_STRING )
CONSTSELF( wxSTC_GC_OPERATOR )

// Lexical states for SCLEX_SPECMAN
CONSTSELF( wxSTC_SN_DEFAULT )
CONSTSELF( wxSTC_SN_CODE )
CONSTSELF( wxSTC_SN_COMMENTLINE )
CONSTSELF( wxSTC_SN_COMMENTLINEBANG )
CONSTSELF( wxSTC_SN_NUMBER )
CONSTSELF( wxSTC_SN_WORD )
CONSTSELF( wxSTC_SN_STRING )
CONSTSELF( wxSTC_SN_WORD2 )
CONSTSELF( wxSTC_SN_WORD3 )
CONSTSELF( wxSTC_SN_PREPROCESSOR )
CONSTSELF( wxSTC_SN_OPERATOR )
CONSTSELF( wxSTC_SN_IDENTIFIER )
CONSTSELF( wxSTC_SN_STRINGEOL )
CONSTSELF( wxSTC_SN_REGEXTAG )
CONSTSELF( wxSTC_SN_SIGNAL )
CONSTSELF( wxSTC_SN_USER )

// Lexical states for SCLEX_AU3
CONSTSELF( wxSTC_AU3_DEFAULT )
CONSTSELF( wxSTC_AU3_COMMENT )
CONSTSELF( wxSTC_AU3_COMMENTBLOCK )
CONSTSELF( wxSTC_AU3_NUMBER )
CONSTSELF( wxSTC_AU3_FUNCTION )
CONSTSELF( wxSTC_AU3_KEYWORD )
CONSTSELF( wxSTC_AU3_MACRO )
CONSTSELF( wxSTC_AU3_STRING )
CONSTSELF( wxSTC_AU3_OPERATOR )
CONSTSELF( wxSTC_AU3_VARIABLE )
CONSTSELF( wxSTC_AU3_SENT )
CONSTSELF( wxSTC_AU3_PREPROCESSOR )
CONSTSELF( wxSTC_AU3_SPECIAL )
CONSTSELF( wxSTC_AU3_EXPAND )
CONSTSELF( wxSTC_AU3_COMOBJ )
CONSTSELF( wxSTC_AU3_UDF )

// Lexical states for SCLEX_APDL
CONSTSELF( wxSTC_APDL_DEFAULT )
CONSTSELF( wxSTC_APDL_COMMENT )
CONSTSELF( wxSTC_APDL_COMMENTBLOCK )
CONSTSELF( wxSTC_APDL_NUMBER )
CONSTSELF( wxSTC_APDL_STRING )
CONSTSELF( wxSTC_APDL_OPERATOR )
CONSTSELF( wxSTC_APDL_WORD )
CONSTSELF( wxSTC_APDL_PROCESSOR )
CONSTSELF( wxSTC_APDL_COMMAND )
CONSTSELF( wxSTC_APDL_SLASHCOMMAND )
CONSTSELF( wxSTC_APDL_STARCOMMAND )
CONSTSELF( wxSTC_APDL_ARGUMENT )
CONSTSELF( wxSTC_APDL_FUNCTION )

// Lexical states for SCLEX_BASH
CONSTSELF( wxSTC_SH_DEFAULT )
CONSTSELF( wxSTC_SH_ERROR )
CONSTSELF( wxSTC_SH_COMMENTLINE )
CONSTSELF( wxSTC_SH_NUMBER )
CONSTSELF( wxSTC_SH_WORD )
CONSTSELF( wxSTC_SH_STRING )
CONSTSELF( wxSTC_SH_CHARACTER )
CONSTSELF( wxSTC_SH_OPERATOR )
CONSTSELF( wxSTC_SH_IDENTIFIER )
CONSTSELF( wxSTC_SH_SCALAR )
CONSTSELF( wxSTC_SH_PARAM )
CONSTSELF( wxSTC_SH_BACKTICKS )
CONSTSELF( wxSTC_SH_HERE_DELIM )
CONSTSELF( wxSTC_SH_HERE_Q )

// Lexical states for SCLEX_ASN1
CONSTSELF( wxSTC_ASN1_DEFAULT )
CONSTSELF( wxSTC_ASN1_COMMENT )
CONSTSELF( wxSTC_ASN1_IDENTIFIER )
CONSTSELF( wxSTC_ASN1_STRING )
CONSTSELF( wxSTC_ASN1_OID )
CONSTSELF( wxSTC_ASN1_SCALAR )
CONSTSELF( wxSTC_ASN1_KEYWORD )
CONSTSELF( wxSTC_ASN1_ATTRIBUTE )
CONSTSELF( wxSTC_ASN1_DESCRIPTOR )
CONSTSELF( wxSTC_ASN1_TYPE )
CONSTSELF( wxSTC_ASN1_OPERATOR )

// Lexical states for SCLEX_VHDL
CONSTSELF( wxSTC_VHDL_DEFAULT )
CONSTSELF( wxSTC_VHDL_COMMENT )
CONSTSELF( wxSTC_VHDL_COMMENTLINEBANG )
CONSTSELF( wxSTC_VHDL_NUMBER )
CONSTSELF( wxSTC_VHDL_STRING )
CONSTSELF( wxSTC_VHDL_OPERATOR )
CONSTSELF( wxSTC_VHDL_IDENTIFIER )
CONSTSELF( wxSTC_VHDL_STRINGEOL )
CONSTSELF( wxSTC_VHDL_KEYWORD )
CONSTSELF( wxSTC_VHDL_STDOPERATOR )
CONSTSELF( wxSTC_VHDL_ATTRIBUTE )
CONSTSELF( wxSTC_VHDL_STDFUNCTION )
CONSTSELF( wxSTC_VHDL_STDPACKAGE )
CONSTSELF( wxSTC_VHDL_STDTYPE )
CONSTSELF( wxSTC_VHDL_USERWORD )

// Lexical states for SCLEX_CAML
CONSTSELF( wxSTC_CAML_DEFAULT )
CONSTSELF( wxSTC_CAML_IDENTIFIER )
CONSTSELF( wxSTC_CAML_TAGNAME )
CONSTSELF( wxSTC_CAML_KEYWORD )
CONSTSELF( wxSTC_CAML_KEYWORD2 )
CONSTSELF( wxSTC_CAML_KEYWORD3 )
CONSTSELF( wxSTC_CAML_LINENUM )
CONSTSELF( wxSTC_CAML_OPERATOR )
CONSTSELF( wxSTC_CAML_NUMBER )
CONSTSELF( wxSTC_CAML_CHAR )
CONSTSELF( wxSTC_CAML_WHITE )
CONSTSELF( wxSTC_CAML_STRING )
CONSTSELF( wxSTC_CAML_COMMENT )
CONSTSELF( wxSTC_CAML_COMMENT1 )
CONSTSELF( wxSTC_CAML_COMMENT2 )
CONSTSELF( wxSTC_CAML_COMMENT3 )

// Lexical states for SCLEX_HASKELL
CONSTSELF( wxSTC_HA_DEFAULT )
CONSTSELF( wxSTC_HA_IDENTIFIER )
CONSTSELF( wxSTC_HA_KEYWORD )
CONSTSELF( wxSTC_HA_NUMBER )
CONSTSELF( wxSTC_HA_STRING )
CONSTSELF( wxSTC_HA_CHARACTER )
CONSTSELF( wxSTC_HA_CLASS )
CONSTSELF( wxSTC_HA_MODULE )
CONSTSELF( wxSTC_HA_CAPITAL )
CONSTSELF( wxSTC_HA_DATA )
CONSTSELF( wxSTC_HA_IMPORT )
CONSTSELF( wxSTC_HA_OPERATOR )
CONSTSELF( wxSTC_HA_INSTANCE )
CONSTSELF( wxSTC_HA_COMMENTLINE )
CONSTSELF( wxSTC_HA_COMMENTBLOCK )
CONSTSELF( wxSTC_HA_COMMENTBLOCK2 )
CONSTSELF( wxSTC_HA_COMMENTBLOCK3 )

// Lexical states of SCLEX_TADS3
CONSTSELF( wxSTC_T3_DEFAULT )
CONSTSELF( wxSTC_T3_X_DEFAULT )
CONSTSELF( wxSTC_T3_PREPROCESSOR )
CONSTSELF( wxSTC_T3_BLOCK_COMMENT )
CONSTSELF( wxSTC_T3_LINE_COMMENT )
CONSTSELF( wxSTC_T3_OPERATOR )
CONSTSELF( wxSTC_T3_KEYWORD )
CONSTSELF( wxSTC_T3_NUMBER )
CONSTSELF( wxSTC_T3_IDENTIFIER )
CONSTSELF( wxSTC_T3_S_STRING )
CONSTSELF( wxSTC_T3_D_STRING )
CONSTSELF( wxSTC_T3_X_STRING )
CONSTSELF( wxSTC_T3_LIB_DIRECTIVE )
CONSTSELF( wxSTC_T3_MSG_PARAM )
CONSTSELF( wxSTC_T3_HTML_TAG )
CONSTSELF( wxSTC_T3_HTML_DEFAULT )
CONSTSELF( wxSTC_T3_HTML_STRING )
CONSTSELF( wxSTC_T3_USER1 )
CONSTSELF( wxSTC_T3_USER2 )
CONSTSELF( wxSTC_T3_USER3 )
CONSTSELF( wxSTC_T3_BRACE )

// Lexical states for SCLEX_REBOL
CONSTSELF( wxSTC_REBOL_DEFAULT )
CONSTSELF( wxSTC_REBOL_COMMENTLINE )
CONSTSELF( wxSTC_REBOL_COMMENTBLOCK )
CONSTSELF( wxSTC_REBOL_PREFACE )
CONSTSELF( wxSTC_REBOL_OPERATOR )
CONSTSELF( wxSTC_REBOL_CHARACTER )
CONSTSELF( wxSTC_REBOL_QUOTEDSTRING )
CONSTSELF( wxSTC_REBOL_BRACEDSTRING )
CONSTSELF( wxSTC_REBOL_NUMBER )
CONSTSELF( wxSTC_REBOL_PAIR )
CONSTSELF( wxSTC_REBOL_TUPLE )
CONSTSELF( wxSTC_REBOL_BINARY )
CONSTSELF( wxSTC_REBOL_MONEY )
CONSTSELF( wxSTC_REBOL_ISSUE )
CONSTSELF( wxSTC_REBOL_TAG )
CONSTSELF( wxSTC_REBOL_FILE )
CONSTSELF( wxSTC_REBOL_EMAIL )
CONSTSELF( wxSTC_REBOL_URL )
CONSTSELF( wxSTC_REBOL_DATE )
CONSTSELF( wxSTC_REBOL_TIME )
CONSTSELF( wxSTC_REBOL_IDENTIFIER )
CONSTSELF( wxSTC_REBOL_WORD )
CONSTSELF( wxSTC_REBOL_WORD2 )
CONSTSELF( wxSTC_REBOL_WORD3 )
CONSTSELF( wxSTC_REBOL_WORD4 )
CONSTSELF( wxSTC_REBOL_WORD5 )
CONSTSELF( wxSTC_REBOL_WORD6 )
CONSTSELF( wxSTC_REBOL_WORD7 )
CONSTSELF( wxSTC_REBOL_WORD8 )

// Lexical states for SCLEX_SQL
CONSTSELF( wxSTC_SQL_DEFAULT )
CONSTSELF( wxSTC_SQL_COMMENT )
CONSTSELF( wxSTC_SQL_COMMENTLINE )
CONSTSELF( wxSTC_SQL_COMMENTDOC )
CONSTSELF( wxSTC_SQL_NUMBER )
CONSTSELF( wxSTC_SQL_WORD )
CONSTSELF( wxSTC_SQL_STRING )
CONSTSELF( wxSTC_SQL_CHARACTER )
CONSTSELF( wxSTC_SQL_SQLPLUS )
CONSTSELF( wxSTC_SQL_SQLPLUS_PROMPT )
CONSTSELF( wxSTC_SQL_OPERATOR )
CONSTSELF( wxSTC_SQL_IDENTIFIER )
CONSTSELF( wxSTC_SQL_SQLPLUS_COMMENT )
CONSTSELF( wxSTC_SQL_COMMENTLINEDOC )
CONSTSELF( wxSTC_SQL_WORD2 )
CONSTSELF( wxSTC_SQL_COMMENTDOCKEYWORD )
CONSTSELF( wxSTC_SQL_COMMENTDOCKEYWORDERROR )
CONSTSELF( wxSTC_SQL_USER1 )
CONSTSELF( wxSTC_SQL_USER2 )
CONSTSELF( wxSTC_SQL_USER3 )
CONSTSELF( wxSTC_SQL_USER4 )
CONSTSELF( wxSTC_SQL_QUOTEDIDENTIFIER )

// Lexical states for SCLEX_SMALLTALK
CONSTSELF( wxSTC_ST_DEFAULT )
CONSTSELF( wxSTC_ST_STRING )
CONSTSELF( wxSTC_ST_NUMBER )
CONSTSELF( wxSTC_ST_COMMENT )
CONSTSELF( wxSTC_ST_SYMBOL )
CONSTSELF( wxSTC_ST_BINARY )
CONSTSELF( wxSTC_ST_BOOL )
CONSTSELF( wxSTC_ST_SELF )
CONSTSELF( wxSTC_ST_SUPER )
CONSTSELF( wxSTC_ST_NIL )
CONSTSELF( wxSTC_ST_GLOBAL )
CONSTSELF( wxSTC_ST_RETURN )
CONSTSELF( wxSTC_ST_SPECIAL )
CONSTSELF( wxSTC_ST_KWSEND )
CONSTSELF( wxSTC_ST_ASSIGN )
CONSTSELF( wxSTC_ST_CHARACTER )
CONSTSELF( wxSTC_ST_SPEC_SEL )

// Lexical states for SCLEX_FLAGSHIP (clipper)
CONSTSELF( wxSTC_FS_DEFAULT )
CONSTSELF( wxSTC_FS_COMMENT )
CONSTSELF( wxSTC_FS_COMMENTLINE )
CONSTSELF( wxSTC_FS_COMMENTDOC )
CONSTSELF( wxSTC_FS_COMMENTLINEDOC )
CONSTSELF( wxSTC_FS_COMMENTDOCKEYWORD )
CONSTSELF( wxSTC_FS_COMMENTDOCKEYWORDERROR )
CONSTSELF( wxSTC_FS_KEYWORD )
CONSTSELF( wxSTC_FS_KEYWORD2 )
CONSTSELF( wxSTC_FS_KEYWORD3 )
CONSTSELF( wxSTC_FS_KEYWORD4 )
CONSTSELF( wxSTC_FS_NUMBER )
CONSTSELF( wxSTC_FS_STRING )
CONSTSELF( wxSTC_FS_PREPROCESSOR )
CONSTSELF( wxSTC_FS_OPERATOR )
CONSTSELF( wxSTC_FS_IDENTIFIER )
CONSTSELF( wxSTC_FS_DATE )
CONSTSELF( wxSTC_FS_STRINGEOL )
CONSTSELF( wxSTC_FS_CONSTANT )
//CONSTSELF( wxSTC_FS_ASM ) // since wc 3.0 ?
//CONSTSELF( wxSTC_FS_LABEL )
//CONSTSELF( wxSTC_FS_ERROR )
//CONSTSELF( wxSTC_FS_HEXNUMBER )
//CONSTSELF( wxSTC_FS_BINNUMBER )

// Lexical states for SCLEX_CSOUND
CONSTSELF( wxSTC_CSOUND_DEFAULT )
CONSTSELF( wxSTC_CSOUND_COMMENT )
CONSTSELF( wxSTC_CSOUND_NUMBER )
CONSTSELF( wxSTC_CSOUND_OPERATOR )
CONSTSELF( wxSTC_CSOUND_INSTR )
CONSTSELF( wxSTC_CSOUND_IDENTIFIER )
CONSTSELF( wxSTC_CSOUND_OPCODE )
CONSTSELF( wxSTC_CSOUND_HEADERSTMT )
CONSTSELF( wxSTC_CSOUND_USERKEYWORD )
CONSTSELF( wxSTC_CSOUND_COMMENTBLOCK )
CONSTSELF( wxSTC_CSOUND_PARAM )
CONSTSELF( wxSTC_CSOUND_ARATE_VAR )
CONSTSELF( wxSTC_CSOUND_KRATE_VAR )
CONSTSELF( wxSTC_CSOUND_IRATE_VAR )
CONSTSELF( wxSTC_CSOUND_GLOBAL_VAR )
CONSTSELF( wxSTC_CSOUND_STRINGEOL )

// Lexical states for SCLEX_INNOSETUP
CONSTSELF( wxSTC_INNO_DEFAULT )
CONSTSELF( wxSTC_INNO_COMMENT )
CONSTSELF( wxSTC_INNO_KEYWORD )
CONSTSELF( wxSTC_INNO_PARAMETER )
CONSTSELF( wxSTC_INNO_SECTION )
CONSTSELF( wxSTC_INNO_PREPROC )
CONSTSELF( wxSTC_INNO_INLINE_EXPANSION )
CONSTSELF( wxSTC_INNO_COMMENT_PASCAL )
CONSTSELF( wxSTC_INNO_KEYWORD_PASCAL )
CONSTSELF( wxSTC_INNO_KEYWORD_USER )
CONSTSELF( wxSTC_INNO_STRING_DOUBLE )
CONSTSELF( wxSTC_INNO_STRING_SINGLE )
CONSTSELF( wxSTC_INNO_IDENTIFIER )

// Lexical states for SCLEX_OPAL
CONSTSELF( wxSTC_OPAL_SPACE )
CONSTSELF( wxSTC_OPAL_COMMENT_BLOCK )
CONSTSELF( wxSTC_OPAL_COMMENT_LINE )
CONSTSELF( wxSTC_OPAL_INTEGER )
CONSTSELF( wxSTC_OPAL_KEYWORD )
CONSTSELF( wxSTC_OPAL_SORT )
CONSTSELF( wxSTC_OPAL_STRING )
CONSTSELF( wxSTC_OPAL_PAR )
CONSTSELF( wxSTC_OPAL_BOOL_CONST )
CONSTSELF( wxSTC_OPAL_DEFAULT )

// Lexical states for SCLEX_SPICE
CONSTSELF( wxSTC_SPICE_DEFAULT )
CONSTSELF( wxSTC_SPICE_IDENTIFIER )
CONSTSELF( wxSTC_SPICE_KEYWORD )
CONSTSELF( wxSTC_SPICE_KEYWORD2 )
CONSTSELF( wxSTC_SPICE_KEYWORD3 )
CONSTSELF( wxSTC_SPICE_NUMBER )
CONSTSELF( wxSTC_SPICE_DELIMITER )
CONSTSELF( wxSTC_SPICE_VALUE )
CONSTSELF( wxSTC_SPICE_COMMENTLINE )

// Lexical states for SCLEX_CMAKE
CONSTSELF( wxSTC_CMAKE_DEFAULT )
CONSTSELF( wxSTC_CMAKE_COMMENT )
CONSTSELF( wxSTC_CMAKE_STRINGDQ )
CONSTSELF( wxSTC_CMAKE_STRINGLQ )
CONSTSELF( wxSTC_CMAKE_STRINGRQ )
CONSTSELF( wxSTC_CMAKE_COMMANDS )
CONSTSELF( wxSTC_CMAKE_PARAMETERS )
CONSTSELF( wxSTC_CMAKE_VARIABLE )
CONSTSELF( wxSTC_CMAKE_USERDEFINED )
CONSTSELF( wxSTC_CMAKE_WHILEDEF )
CONSTSELF( wxSTC_CMAKE_FOREACHDEF )
CONSTSELF( wxSTC_CMAKE_IFDEFINEDEF )
CONSTSELF( wxSTC_CMAKE_MACRODEF )
CONSTSELF( wxSTC_CMAKE_STRINGVAR )
CONSTSELF( wxSTC_CMAKE_NUMBER )

// Lexical states for SCLEX_GAP
CONSTSELF( wxSTC_GAP_DEFAULT )
CONSTSELF( wxSTC_GAP_IDENTIFIER )
CONSTSELF( wxSTC_GAP_KEYWORD )
CONSTSELF( wxSTC_GAP_KEYWORD2 )
CONSTSELF( wxSTC_GAP_KEYWORD3 )
CONSTSELF( wxSTC_GAP_KEYWORD4 )
CONSTSELF( wxSTC_GAP_STRING )
CONSTSELF( wxSTC_GAP_CHAR )
CONSTSELF( wxSTC_GAP_OPERATOR )
CONSTSELF( wxSTC_GAP_COMMENT )
CONSTSELF( wxSTC_GAP_NUMBER )
CONSTSELF( wxSTC_GAP_STRINGEOL )

// Lexical state for SCLEX_PLM
CONSTSELF( wxSTC_PLM_DEFAULT )
CONSTSELF( wxSTC_PLM_COMMENT )
CONSTSELF( wxSTC_PLM_STRING )
CONSTSELF( wxSTC_PLM_NUMBER )
CONSTSELF( wxSTC_PLM_IDENTIFIER )
CONSTSELF( wxSTC_PLM_OPERATOR )
CONSTSELF( wxSTC_PLM_CONTROL )
CONSTSELF( wxSTC_PLM_KEYWORD )

// Lexical state for SCLEX_PROGRESS
CONSTSELF( wxSTC_4GL_DEFAULT )
CONSTSELF( wxSTC_4GL_NUMBER )
CONSTSELF( wxSTC_4GL_WORD )
CONSTSELF( wxSTC_4GL_STRING )
CONSTSELF( wxSTC_4GL_CHARACTER )
CONSTSELF( wxSTC_4GL_PREPROCESSOR )
CONSTSELF( wxSTC_4GL_OPERATOR )
CONSTSELF( wxSTC_4GL_IDENTIFIER )
CONSTSELF( wxSTC_4GL_BLOCK )
CONSTSELF( wxSTC_4GL_END )
CONSTSELF( wxSTC_4GL_COMMENT1 )
CONSTSELF( wxSTC_4GL_COMMENT2 )
CONSTSELF( wxSTC_4GL_COMMENT3 )
CONSTSELF( wxSTC_4GL_COMMENT4 )
CONSTSELF( wxSTC_4GL_COMMENT5 )
CONSTSELF( wxSTC_4GL_COMMENT6 )
CONSTSELF( wxSTC_4GL_DEFAULT_ )
CONSTSELF( wxSTC_4GL_NUMBER_ )
CONSTSELF( wxSTC_4GL_WORD_ )
CONSTSELF( wxSTC_4GL_STRING_ )
CONSTSELF( wxSTC_4GL_CHARACTER_ )
CONSTSELF( wxSTC_4GL_PREPROCESSOR_ )
CONSTSELF( wxSTC_4GL_OPERATOR_ )
CONSTSELF( wxSTC_4GL_IDENTIFIER_ )
CONSTSELF( wxSTC_4GL_BLOCK_ )
CONSTSELF( wxSTC_4GL_END_ )
CONSTSELF( wxSTC_4GL_COMMENT1_ )
CONSTSELF( wxSTC_4GL_COMMENT2_ )
CONSTSELF( wxSTC_4GL_COMMENT3_ )
CONSTSELF( wxSTC_4GL_COMMENT4_ )
CONSTSELF( wxSTC_4GL_COMMENT5_ )
CONSTSELF( wxSTC_4GL_COMMENT6_ )

// Lexical states for SCLEX_ABAQUS
CONSTSELF( wxSTC_ABAQUS_DEFAULT )
CONSTSELF( wxSTC_ABAQUS_COMMENT )
CONSTSELF( wxSTC_ABAQUS_COMMENTBLOCK )
CONSTSELF( wxSTC_ABAQUS_NUMBER )
CONSTSELF( wxSTC_ABAQUS_STRING )
CONSTSELF( wxSTC_ABAQUS_OPERATOR )
CONSTSELF( wxSTC_ABAQUS_WORD )
CONSTSELF( wxSTC_ABAQUS_PROCESSOR )
CONSTSELF( wxSTC_ABAQUS_COMMAND )
CONSTSELF( wxSTC_ABAQUS_SLASHCOMMAND )
CONSTSELF( wxSTC_ABAQUS_STARCOMMAND )
CONSTSELF( wxSTC_ABAQUS_ARGUMENT )
CONSTSELF( wxSTC_ABAQUS_FUNCTION )

// Lexical states for SCLEX_ASYMPTOTE
CONSTSELF( wxSTC_ASY_DEFAULT )
CONSTSELF( wxSTC_ASY_COMMENT )
CONSTSELF( wxSTC_ASY_COMMENTLINE )
CONSTSELF( wxSTC_ASY_NUMBER )
CONSTSELF( wxSTC_ASY_WORD )
CONSTSELF( wxSTC_ASY_STRING )
CONSTSELF( wxSTC_ASY_CHARACTER )
CONSTSELF( wxSTC_ASY_OPERATOR )
CONSTSELF( wxSTC_ASY_IDENTIFIER )
CONSTSELF( wxSTC_ASY_STRINGEOL )
CONSTSELF( wxSTC_ASY_COMMENTLINEDOC )
CONSTSELF( wxSTC_ASY_WORD2 )

// Lexical states for SCLEX_R
CONSTSELF( wxSTC_R_DEFAULT )
CONSTSELF( wxSTC_R_COMMENT )
CONSTSELF( wxSTC_R_KWORD )
CONSTSELF( wxSTC_R_BASEKWORD )
CONSTSELF( wxSTC_R_OTHERKWORD )
CONSTSELF( wxSTC_R_NUMBER )
CONSTSELF( wxSTC_R_STRING )
CONSTSELF( wxSTC_R_STRING2 )
CONSTSELF( wxSTC_R_OPERATOR )
CONSTSELF( wxSTC_R_IDENTIFIER )
CONSTSELF( wxSTC_R_INFIX )
CONSTSELF( wxSTC_R_INFIXEOL )

// Lexical state for SCLEX_MAGIKSF
CONSTSELF( wxSTC_MAGIK_DEFAULT )
CONSTSELF( wxSTC_MAGIK_COMMENT )
CONSTSELF( wxSTC_MAGIK_HYPER_COMMENT )
CONSTSELF( wxSTC_MAGIK_STRING )
CONSTSELF( wxSTC_MAGIK_CHARACTER )
CONSTSELF( wxSTC_MAGIK_NUMBER )
CONSTSELF( wxSTC_MAGIK_IDENTIFIER )
CONSTSELF( wxSTC_MAGIK_OPERATOR )
CONSTSELF( wxSTC_MAGIK_FLOW )
CONSTSELF( wxSTC_MAGIK_CONTAINER )
CONSTSELF( wxSTC_MAGIK_BRACKET_BLOCK )
CONSTSELF( wxSTC_MAGIK_BRACE_BLOCK )
CONSTSELF( wxSTC_MAGIK_SQBRACKET_BLOCK )
CONSTSELF( wxSTC_MAGIK_UNKNOWN_KEYWORD )
CONSTSELF( wxSTC_MAGIK_KEYWORD )
CONSTSELF( wxSTC_MAGIK_PRAGMA )
CONSTSELF( wxSTC_MAGIK_SYMBOL )

// Lexical state for SCLEX_POWERSHELL
CONSTSELF( wxSTC_POWERSHELL_DEFAULT )
CONSTSELF( wxSTC_POWERSHELL_COMMENT )
CONSTSELF( wxSTC_POWERSHELL_STRING )
CONSTSELF( wxSTC_POWERSHELL_CHARACTER )
CONSTSELF( wxSTC_POWERSHELL_NUMBER )
CONSTSELF( wxSTC_POWERSHELL_VARIABLE )
CONSTSELF( wxSTC_POWERSHELL_OPERATOR )
CONSTSELF( wxSTC_POWERSHELL_IDENTIFIER )
CONSTSELF( wxSTC_POWERSHELL_KEYWORD )
CONSTSELF( wxSTC_POWERSHELL_CMDLET )
CONSTSELF( wxSTC_POWERSHELL_ALIAS )

// Lexical state for SCLEX_MYSQL
CONSTSELF( wxSTC_MYSQL_DEFAULT )
CONSTSELF( wxSTC_MYSQL_COMMENT )
CONSTSELF( wxSTC_MYSQL_COMMENTLINE )
CONSTSELF( wxSTC_MYSQL_VARIABLE )
CONSTSELF( wxSTC_MYSQL_SYSTEMVARIABLE )
CONSTSELF( wxSTC_MYSQL_KNOWNSYSTEMVARIABLE )
CONSTSELF( wxSTC_MYSQL_NUMBER )
CONSTSELF( wxSTC_MYSQL_MAJORKEYWORD )
CONSTSELF( wxSTC_MYSQL_KEYWORD )
CONSTSELF( wxSTC_MYSQL_DATABASEOBJECT )
CONSTSELF( wxSTC_MYSQL_PROCEDUREKEYWORD )
CONSTSELF( wxSTC_MYSQL_STRING )
CONSTSELF( wxSTC_MYSQL_SQSTRING )
CONSTSELF( wxSTC_MYSQL_DQSTRING )
CONSTSELF( wxSTC_MYSQL_OPERATOR )
CONSTSELF( wxSTC_MYSQL_FUNCTION )
CONSTSELF( wxSTC_MYSQL_IDENTIFIER )
CONSTSELF( wxSTC_MYSQL_QUOTEDIDENTIFIER )
CONSTSELF( wxSTC_MYSQL_USER1 )
CONSTSELF( wxSTC_MYSQL_USER2 )
CONSTSELF( wxSTC_MYSQL_USER3 )
CONSTSELF( wxSTC_MYSQL_HIDDENCOMMAND )

// Lexical state for SCLEX_PO
CONSTSELF( wxSTC_PO_DEFAULT )
CONSTSELF( wxSTC_PO_COMMENT )
CONSTSELF( wxSTC_PO_MSGID )
CONSTSELF( wxSTC_PO_MSGID_TEXT )
CONSTSELF( wxSTC_PO_MSGSTR )
CONSTSELF( wxSTC_PO_MSGSTR_TEXT )
CONSTSELF( wxSTC_PO_MSGCTXT )
CONSTSELF( wxSTC_PO_MSGCTXT_TEXT )
CONSTSELF( wxSTC_PO_FUZZY )

// Lexical states for SCLEX_PASCAL
CONSTSELF( wxSTC_PAS_DEFAULT )
CONSTSELF( wxSTC_PAS_IDENTIFIER )
CONSTSELF( wxSTC_PAS_COMMENT )
CONSTSELF( wxSTC_PAS_COMMENT2 )
CONSTSELF( wxSTC_PAS_COMMENTLINE )
CONSTSELF( wxSTC_PAS_PREPROCESSOR )
CONSTSELF( wxSTC_PAS_PREPROCESSOR2 )
CONSTSELF( wxSTC_PAS_NUMBER )
CONSTSELF( wxSTC_PAS_HEXNUMBER )
CONSTSELF( wxSTC_PAS_WORD )
CONSTSELF( wxSTC_PAS_STRING )
CONSTSELF( wxSTC_PAS_STRINGEOL )
CONSTSELF( wxSTC_PAS_CHARACTER )
CONSTSELF( wxSTC_PAS_OPERATOR )
CONSTSELF( wxSTC_PAS_ASM )

// Lexical state for SCLEX_SORCUS
CONSTSELF( wxSTC_SORCUS_DEFAULT )
CONSTSELF( wxSTC_SORCUS_COMMAND )
CONSTSELF( wxSTC_SORCUS_PARAMETER )
CONSTSELF( wxSTC_SORCUS_COMMENTLINE )
CONSTSELF( wxSTC_SORCUS_STRING )
CONSTSELF( wxSTC_SORCUS_STRINGEOL )
CONSTSELF( wxSTC_SORCUS_IDENTIFIER )
CONSTSELF( wxSTC_SORCUS_OPERATOR )
CONSTSELF( wxSTC_SORCUS_NUMBER )
CONSTSELF( wxSTC_SORCUS_CONSTANT )

// Lexical state for SCLEX_POWERPRO
CONSTSELF( wxSTC_POWERPRO_DEFAULT )
CONSTSELF( wxSTC_POWERPRO_COMMENTBLOCK )
CONSTSELF( wxSTC_POWERPRO_COMMENTLINE )
CONSTSELF( wxSTC_POWERPRO_NUMBER )
CONSTSELF( wxSTC_POWERPRO_WORD )
CONSTSELF( wxSTC_POWERPRO_WORD2 )
CONSTSELF( wxSTC_POWERPRO_WORD3 )
CONSTSELF( wxSTC_POWERPRO_WORD4 )
CONSTSELF( wxSTC_POWERPRO_DOUBLEQUOTEDSTRING )
CONSTSELF( wxSTC_POWERPRO_SINGLEQUOTEDSTRING )
CONSTSELF( wxSTC_POWERPRO_LINECONTINUE )
CONSTSELF( wxSTC_POWERPRO_OPERATOR )
CONSTSELF( wxSTC_POWERPRO_IDENTIFIER )
CONSTSELF( wxSTC_POWERPRO_STRINGEOL )
CONSTSELF( wxSTC_POWERPRO_VERBATIM )
CONSTSELF( wxSTC_POWERPRO_ALTQUOTE )
CONSTSELF( wxSTC_POWERPRO_FUNCTION )

// Lexical states for SCLEX_SML
CONSTSELF( wxSTC_SML_DEFAULT )
CONSTSELF( wxSTC_SML_IDENTIFIER )
CONSTSELF( wxSTC_SML_TAGNAME )
CONSTSELF( wxSTC_SML_KEYWORD )
CONSTSELF( wxSTC_SML_KEYWORD2 )
CONSTSELF( wxSTC_SML_KEYWORD3 )
CONSTSELF( wxSTC_SML_LINENUM )
CONSTSELF( wxSTC_SML_OPERATOR )
CONSTSELF( wxSTC_SML_NUMBER )
CONSTSELF( wxSTC_SML_CHAR )
CONSTSELF( wxSTC_SML_STRING )
CONSTSELF( wxSTC_SML_COMMENT )
CONSTSELF( wxSTC_SML_COMMENT1 )
CONSTSELF( wxSTC_SML_COMMENT2 )
CONSTSELF( wxSTC_SML_COMMENT3 )

// Lexical state for SCLEX_MARKDOWN
CONSTSELF( wxSTC_MARKDOWN_DEFAULT )
CONSTSELF( wxSTC_MARKDOWN_LINE_BEGIN )
CONSTSELF( wxSTC_MARKDOWN_STRONG1 )
CONSTSELF( wxSTC_MARKDOWN_STRONG2 )
CONSTSELF( wxSTC_MARKDOWN_EM1 )
CONSTSELF( wxSTC_MARKDOWN_EM2 )
CONSTSELF( wxSTC_MARKDOWN_HEADER1 )
CONSTSELF( wxSTC_MARKDOWN_HEADER2 )
CONSTSELF( wxSTC_MARKDOWN_HEADER3 )
CONSTSELF( wxSTC_MARKDOWN_HEADER4 )
CONSTSELF( wxSTC_MARKDOWN_HEADER5 )
CONSTSELF( wxSTC_MARKDOWN_HEADER6 )
CONSTSELF( wxSTC_MARKDOWN_PRECHAR )
CONSTSELF( wxSTC_MARKDOWN_ULIST_ITEM )
CONSTSELF( wxSTC_MARKDOWN_OLIST_ITEM )
CONSTSELF( wxSTC_MARKDOWN_BLOCKQUOTE )
CONSTSELF( wxSTC_MARKDOWN_STRIKEOUT )
CONSTSELF( wxSTC_MARKDOWN_HRULE )
CONSTSELF( wxSTC_MARKDOWN_LINK )
CONSTSELF( wxSTC_MARKDOWN_CODE )
CONSTSELF( wxSTC_MARKDOWN_CODE2 )
CONSTSELF( wxSTC_MARKDOWN_CODEBK )

//}}}
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Commands that can be bound to keystrokes section {{{


// Redoes the next action on the undo history.
CONSTSELF( wxSTC_CMD_REDO )

// Select all the text in the document.
CONSTSELF( wxSTC_CMD_SELECTALL )

// Undo one action in the undo history.
CONSTSELF( wxSTC_CMD_UNDO )

// Cut the selection to the clipboard.
CONSTSELF( wxSTC_CMD_CUT )

// Copy the selection to the clipboard.
CONSTSELF( wxSTC_CMD_COPY )

// Paste the contents of the clipboard into the document replacing the selection.
CONSTSELF( wxSTC_CMD_PASTE )

// Clear the selection.
CONSTSELF( wxSTC_CMD_CLEAR )

// Move caret down one line.
CONSTSELF( wxSTC_CMD_LINEDOWN )

// Move caret down one line extending selection to new caret position.
CONSTSELF( wxSTC_CMD_LINEDOWNEXTEND )

// Move caret up one line.
CONSTSELF( wxSTC_CMD_LINEUP )

// Move caret up one line extending selection to new caret position.
CONSTSELF( wxSTC_CMD_LINEUPEXTEND )

// Move caret left one character.
CONSTSELF( wxSTC_CMD_CHARLEFT )

// Move caret left one character extending selection to new caret position.
CONSTSELF( wxSTC_CMD_CHARLEFTEXTEND )

// Move caret right one character.
CONSTSELF( wxSTC_CMD_CHARRIGHT )

// Move caret right one character extending selection to new caret position.
CONSTSELF( wxSTC_CMD_CHARRIGHTEXTEND )

// Move caret left one word.
CONSTSELF( wxSTC_CMD_WORDLEFT )

// Move caret left one word extending selection to new caret position.
CONSTSELF( wxSTC_CMD_WORDLEFTEXTEND )

// Move caret right one word.
CONSTSELF( wxSTC_CMD_WORDRIGHT )

// Move caret right one word extending selection to new caret position.
CONSTSELF( wxSTC_CMD_WORDRIGHTEXTEND )

// Move caret to first position on line.
CONSTSELF( wxSTC_CMD_HOME )

// Move caret to first position on line extending selection to new caret position.
CONSTSELF( wxSTC_CMD_HOMEEXTEND )

// Move caret to last position on line.
CONSTSELF( wxSTC_CMD_LINEEND )

// Move caret to last position on line extending selection to new caret position.
CONSTSELF( wxSTC_CMD_LINEENDEXTEND )

// Move caret to first position in document.
CONSTSELF( wxSTC_CMD_DOCUMENTSTART )

// Move caret to first position in document extending selection to new caret position.
CONSTSELF( wxSTC_CMD_DOCUMENTSTARTEXTEND )

// Move caret to last position in document.
CONSTSELF( wxSTC_CMD_DOCUMENTEND )

// Move caret to last position in document extending selection to new caret position.
CONSTSELF( wxSTC_CMD_DOCUMENTENDEXTEND )

// Move caret one page up.
CONSTSELF( wxSTC_CMD_PAGEUP )

// Move caret one page up extending selection to new caret position.
CONSTSELF( wxSTC_CMD_PAGEUPEXTEND )

// Move caret one page down.
CONSTSELF( wxSTC_CMD_PAGEDOWN )

// Move caret one page down extending selection to new caret position.
CONSTSELF( wxSTC_CMD_PAGEDOWNEXTEND )

// Switch from insert to overtype mode or the reverse.
CONSTSELF( wxSTC_CMD_EDITTOGGLEOVERTYPE )

// Cancel any modes such as call tip or auto-completion list display.
CONSTSELF( wxSTC_CMD_CANCEL )

// Delete the selection or if no selection, the character before the caret.
CONSTSELF( wxSTC_CMD_DELETEBACK )

// If selection is empty or all on one line replace the selection with a tab character.
// If more than one line selected, indent the lines.
CONSTSELF( wxSTC_CMD_TAB )

// Dedent the selected lines.
CONSTSELF( wxSTC_CMD_BACKTAB )

// Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
CONSTSELF( wxSTC_CMD_NEWLINE )

// Insert a Form Feed character.
CONSTSELF( wxSTC_CMD_FORMFEED )

// Move caret to before first visible character on line.
// If already there move to first character on line.
CONSTSELF( wxSTC_CMD_VCHOME )

// Like VCHome but extending selection to new caret position.
CONSTSELF( wxSTC_CMD_VCHOMEEXTEND )

// Magnify the displayed text by increasing the sizes by ) point.
CONSTSELF( wxSTC_CMD_ZOOMIN )

// Make the displayed text smaller by decreasing the sizes by ) point.
CONSTSELF( wxSTC_CMD_ZOOMOUT )

// Delete the word to the left of the caret.
CONSTSELF( wxSTC_CMD_DELWORDLEFT )

// Delete the word to the right of the caret.
CONSTSELF( wxSTC_CMD_DELWORDRIGHT )

// Delete the word to the right of the caret, but not the trailing non-word characters.
CONSTSELF( wxSTC_CMD_DELWORDRIGHTEND )

// Cut the line containing the caret.
CONSTSELF( wxSTC_CMD_LINECUT )

// Delete the line containing the caret.
CONSTSELF( wxSTC_CMD_LINEDELETE )

// Switch the current line with the previous.
CONSTSELF( wxSTC_CMD_LINETRANSPOSE )

// Duplicate the current line.
CONSTSELF( wxSTC_CMD_LINEDUPLICATE )

// Transform the selection to lower case.
CONSTSELF( wxSTC_CMD_LOWERCASE )

// Transform the selection to upper case.
CONSTSELF( wxSTC_CMD_UPPERCASE )

// Scroll the document down, keeping the caret visible.
CONSTSELF( wxSTC_CMD_LINESCROLLDOWN )

// Scroll the document up, keeping the caret visible.
CONSTSELF( wxSTC_CMD_LINESCROLLUP )

// Delete the selection or if no selection, the character before the caret.
// Will not delete the character before at the start of a line.
CONSTSELF( wxSTC_CMD_DELETEBACKNOTLINE )

// Move caret to first position on display line.
CONSTSELF( wxSTC_CMD_HOMEDISPLAY )

// Move caret to first position on display line extending selection to
// new caret position.
CONSTSELF( wxSTC_CMD_HOMEDISPLAYEXTEND )

// Move caret to last position on display line.
CONSTSELF( wxSTC_CMD_LINEENDDISPLAY )

// Move caret to last position on display line extending selection to new
// caret position.
CONSTSELF( wxSTC_CMD_LINEENDDISPLAYEXTEND )

// These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?
// except they behave differently when word-wrap is enabled:
// They go first to the start / end of the display line, like (Home|LineEnd)Display
// The difference is that, the cursor is already at the point, it goes on to the start
// or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.
CONSTSELF( wxSTC_CMD_HOMEWRAP )
CONSTSELF( wxSTC_CMD_HOMEWRAPEXTEND )
CONSTSELF( wxSTC_CMD_LINEENDWRAP )
CONSTSELF( wxSTC_CMD_LINEENDWRAPEXTEND )
CONSTSELF( wxSTC_CMD_VCHOMEWRAP )
CONSTSELF( wxSTC_CMD_VCHOMEWRAPEXTEND )

// Copy the line containing the caret.
CONSTSELF( wxSTC_CMD_LINECOPY )

// Move to the previous change in capitalisation.
CONSTSELF( wxSTC_CMD_WORDPARTLEFT )

// Move to the previous change in capitalisation extending selection
// to new caret position.
CONSTSELF( wxSTC_CMD_WORDPARTLEFTEXTEND )

// Move to the change next in capitalisation.
CONSTSELF( wxSTC_CMD_WORDPARTRIGHT )

// Move to the next change in capitalisation extending selection
// to new caret position.
CONSTSELF( wxSTC_CMD_WORDPARTRIGHTEXTEND )

// Delete back from the current position to the start of the line.
CONSTSELF( wxSTC_CMD_DELLINELEFT )

// Delete forwards from the current position to the end of the line.
CONSTSELF( wxSTC_CMD_DELLINERIGHT )

// Move caret between paragraphs (delimited by empty lines).
CONSTSELF( wxSTC_CMD_PARADOWN )
CONSTSELF( wxSTC_CMD_PARADOWNEXTEND )
CONSTSELF( wxSTC_CMD_PARAUP )
CONSTSELF( wxSTC_CMD_PARAUPEXTEND )

// Move caret down one line, extending rectangular selection to new caret position.
CONSTSELF( wxSTC_CMD_LINEDOWNRECTEXTEND )

// Move caret up one line, extending rectangular selection to new caret position.
CONSTSELF( wxSTC_CMD_LINEUPRECTEXTEND )

// Move caret left one character, extending rectangular selection to new caret position.
CONSTSELF( wxSTC_CMD_CHARLEFTRECTEXTEND )

// Move caret right one character, extending rectangular selection to new caret position.
CONSTSELF( wxSTC_CMD_CHARRIGHTRECTEXTEND )

// Move caret to first position on line, extending rectangular selection to new caret position.
CONSTSELF( wxSTC_CMD_HOMERECTEXTEND )

// Move caret to before first visible character on line.
// If already there move to first character on line.
// In either case, extend rectangular selection to new caret position.
CONSTSELF( wxSTC_CMD_VCHOMERECTEXTEND )

// Move caret to last position on line, extending rectangular selection to new caret position.
CONSTSELF( wxSTC_CMD_LINEENDRECTEXTEND )

// Move caret one page up, extending rectangular selection to new caret position.
CONSTSELF( wxSTC_CMD_PAGEUPRECTEXTEND )

// Move caret one page down, extending rectangular selection to new caret position.
CONSTSELF( wxSTC_CMD_PAGEDOWNRECTEXTEND )

// Move caret to top of page, or one page up if already at top of page.
CONSTSELF( wxSTC_CMD_STUTTEREDPAGEUP )

// Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
CONSTSELF( wxSTC_CMD_STUTTEREDPAGEUPEXTEND )

// Move caret to bottom of page, or one page down if already at bottom of page.
CONSTSELF( wxSTC_CMD_STUTTEREDPAGEDOWN )

// Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
CONSTSELF( wxSTC_CMD_STUTTEREDPAGEDOWNEXTEND )

// Move caret left one word, position cursor at end of word.
CONSTSELF( wxSTC_CMD_WORDLEFTEND )

// Move caret left one word, position cursor at end of word, extending selection to new caret position.
CONSTSELF( wxSTC_CMD_WORDLEFTENDEXTEND )

// Move caret right one word, position cursor at end of word.
CONSTSELF( wxSTC_CMD_WORDRIGHTEND )

// Move caret right one word, position cursor at end of word, extending selection to new caret position.
CONSTSELF( wxSTC_CMD_WORDRIGHTENDEXTEND )


 
