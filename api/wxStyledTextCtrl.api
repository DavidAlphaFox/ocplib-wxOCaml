
type wxDragResult = int

class wxStyledTextEvent inherit wxCommandEvent begin
  int 	GetPosition () const
  int 	GetKey () const
  int 	GetModifiers () const
  int 	GetModificationType () const
  wxString 	GetText () const
  int 	GetLength () const
  int 	GetLinesAdded () const
  int 	GetLine () const
  int 	GetFoldLevelNow () const
  int 	GetFoldLevelPrev () const
  int 	GetMargin () const
  int 	GetMessage () const
  int 	GetWParam () const
  int 	GetLParam () const
  int 	GetListType () const
  int 	GetX () const
  int 	GetY () const
 
  wxString 	GetDragText ()
  version 2.9 begin 
    int 	GetDragFlags ()
    int 	GetToken () const
    int 	GetAnnotationsLinesAdded () const
    int 	GetUpdated () const
  end

  wxDragResult 	GetDragResult ()
  bool 	GetShift () const
  bool 	GetControl () const
  bool 	GetAlt () const

end


events wxStyledTextEvent [

  EVT_STC_CHANGE
  EVT_STC_STYLENEEDED
  EVT_STC_CHARADDED
  EVT_STC_SAVEPOINTREACHED
  EVT_STC_SAVEPOINTLEFT
  EVT_STC_ROMODIFYATTEMPT
  EVT_STC_KEY
  EVT_STC_DOUBLECLICK
  EVT_STC_UPDATEUI
  EVT_STC_MODIFIED
  EVT_STC_MACRORECORD
  EVT_STC_MARGINCLICK
  EVT_STC_NEEDSHOWN
  EVT_STC_PAINTED
  EVT_STC_USERLISTSELECTION
  EVT_STC_URIDROPPED
  EVT_STC_DWELLSTART
  EVT_STC_DWELLEND
  EVT_STC_START_DRAG
  EVT_STC_DRAG_OVER
  EVT_STC_DO_DROP
  EVT_STC_ZOOM
  EVT_STC_HOTSPOT_CLICK
  EVT_STC_HOTSPOT_DCLICK
  EVT_STC_CALLTIP_CLICK
  EVT_STC_AUTOCOMP_SELECTION
  EVT_STC_INDICATOR_CLICK
  EVT_STC_INDICATOR_RELEASE
  EVT_STC_AUTOCOMP_CANCELLED
  EVT_STC_AUTOCOMP_CHAR_DELETED
]

class wxStyledTextCtrl inherit wxControl begin
 
   new Create (wxWindow *parent, wxWindowID id=wxID_ANY, 
               const wxPoint &pos=wxDefaultPosition, 
               const wxSize &size=wxDefaultSize, long style=0)
 
   new CreateAll (wxWindow *parent, wxWindowID id=wxID_ANY, 
         const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, 
         long style=0, const wxString &name=wxSTCNameStr)
 
void 	AddText (const wxString &text)

(*
void 	AddStyledText (const wxMemoryBuffer &data)
 	Add array of cells to document. 
*)
 
void 	InsertText (int pos, const wxString &text)
void 	ClearAll ()
void 	ClearDocumentStyle ()
int 	GetLength () const
int 	GetCharAt (int pos) const
int 	GetCurrentPos () const
int 	GetAnchor () const
int 	GetStyleAt (int pos) const
void 	Redo ()
void 	SetUndoCollection (bool collectUndo)
void 	SelectAll ()
void 	SetSavePoint ()

(*
 
wxMemoryBuffer 	GetStyledText (int startPos, int endPos)
 	Retrieve a buffer of cells. 
*)
 
bool 	CanRedo () const
int 	MarkerLineFromHandle (int handle)
void 	MarkerDeleteHandle (int handle)
bool 	GetUndoCollection () const
int 	GetViewWhiteSpace () const
void 	SetViewWhiteSpace (int viewWS)
int 	PositionFromPoint (wxPoint& pt) const
int 	PositionFromPointClose (int x, int y)
void 	GotoLine (int line)
void 	GotoPos (int pos)
void 	SetAnchor (int posAnchor)

(*
wxString 	GetCurLine (int *linePos=NULL)
 	Retrieve the text of the line containing the caret. 
*)
 
int 	GetEndStyled () const
void 	ConvertEOLs (int eolMode)
int 	GetEOLMode () const
void 	SetEOLMode (int eolMode)
void 	StartStyling (int pos, int mask)
void 	SetStyling (int length, int style)
bool 	GetBufferedDraw () const
void 	SetBufferedDraw (bool buffered)

void 	SetTabWidth (int tabWidth)
int 	GetTabWidth () const
void 	SetCodePage (int codePage)

void 	MarkerDefine (int markerNumber, int markerSymbol, const wxColour &foreground=wxNullColour, const wxColour &background=wxNullColour)

(*
 	Set the symbol used for a particular marker number, and optionally the fore and background colours. 
 
void 	MarkerSetForeground (int markerNumber, const wxColour &fore)
 	Set the foreground colour used for a particular marker number. 
 
void 	MarkerSetBackground (int markerNumber, const wxColour &back)
 	Set the background colour used for a particular marker number. 
 
void 	MarkerSetBackgroundSelected (int markerNumber, const wxColour &back)
 	Set the background colour used for a particular marker number when its folding block is selected. 
 
void 	MarkerEnableHighlight (bool enabled)
 	Enable/disable highlight for current folding bloc (smallest one that contains the caret) 
 
int 	MarkerAdd (int line, int markerNumber)
 	Add a marker to a line, returning an ID which can be used to find or delete the marker. 
 
void 	MarkerDelete (int line, int markerNumber)
 	Delete a marker from a line. 
 
void 	MarkerDeleteAll (int markerNumber)
 	Delete all markers with a particular number from all lines. 
 
int 	MarkerGet (int line)
 	Get a bit mask of all the markers set on a line. 
 
int 	MarkerNext (int lineStart, int markerMask)
 	Find the next line at or after lineStart that includes a marker in mask. 
 
int 	MarkerPrevious (int lineStart, int markerMask)
 	Find the previous line before lineStart that includes a marker in mask. 
 
void 	MarkerDefineBitmap (int markerNumber, const wxBitmap &bmp)
 	Define a marker from a bitmap. 
 
void 	MarkerAddSet (int line, int set)
 	Add a set of markers to a line. 
 
void 	MarkerSetAlpha (int markerNumber, int alpha)
 	Set the alpha used for a marker that is drawn in the text area, not the margin. 
 *)

void 	SetMarginType (int margin, int marginType)
int 	GetMarginType (int margin) const
void 	SetMarginWidth (int margin, int pixelWidth)
int 	GetMarginWidth (int margin) const
void 	SetMarginMask (int margin, int mask)
int 	GetMarginMask (int margin) const
void 	SetMarginSensitive (int margin, bool sensitive)
bool 	GetMarginSensitive (int margin) const
void 	StyleClearAll ()
void 	StyleSetForeground (int style, const wxColour &fore)
void 	StyleSetBackground (int style, const wxColour &back)
void 	StyleSetBold (int style, bool bold)

(*
 	Set a style to be bold or not. 
 
void 	StyleSetItalic (int style, bool italic)
 	Set a style to be italic or not. 
 
void 	StyleSetSize (int style, int sizePoints)
 	Set the size of characters of a style. 
 
void 	StyleSetFaceName (int style, const wxString &fontName)
 	Set the font of a style. 
 
void 	StyleSetEOLFilled (int style, bool filled)
 	Set a style to have its end of line filled or not. 
 
void 	StyleResetDefault ()
 	Reset the default style to its state at startup. 
 
void 	StyleSetUnderline (int style, bool underline)
 	Set a style to be underlined or not. 
 
wxColour 	StyleGetForeground (int style) const
 	Get the foreground colour of a style. 
 
wxColour 	StyleGetBackground (int style) const
 	Get the background colour of a style. 
 
bool 	StyleGetBold (int style) const
 	Get is a style bold or not. 
 
bool 	StyleGetItalic (int style) const
 	Get is a style italic or not. 
 
int 	StyleGetSize (int style) const
 	Get the size of characters of a style. 
 
wxString 	StyleGetFaceName (int style)
 	Get the font facename of a style. 
 
bool 	StyleGetEOLFilled (int style) const
 	Get is a style to have its end of line filled or not. 
 
bool 	StyleGetUnderline (int style) const
 	Get is a style underlined or not. 
 
int 	StyleGetCase (int style) const
 	Get is a style mixed case, or to force upper or lower case. 
 
int 	StyleGetCharacterSet (int style) const
 	Get the character set of the font in a style. 
 
bool 	StyleGetVisible (int style) const
 	Get is a style visible or not. 
 
bool 	StyleGetChangeable (int style) const
 	Get is a style changeable or not (read only). 
 
bool 	StyleGetHotSpot (int style) const
 	Get is a style a hotspot or not. 
 
void 	StyleSetCase (int style, int caseForce)
 	Set a style to be mixed case, or to force upper or lower case. 
 
void 	StyleSetSizeFractional (int style, int caseForce)
 	Set the size of characters of a style. 
 
int 	StyleGetSizeFractional (int style) const
 	Get the size of characters of a style in points multiplied by 100. 
 
void 	StyleSetWeight (int style, int weight)
 	Set the weight of characters of a style. 
 
int 	StyleGetWeight (int style) const
 	Get the weight of characters of a style. 
 
void 	StyleSetHotSpot (int style, bool hotspot)
 	Set a style to be a hotspot or not. 
 
void 	SetSelForeground (bool useSetting, const wxColour &fore)
 	Set the foreground colour of the main and additional selections and whether to use this setting. 
 
void 	SetSelBackground (bool useSetting, const wxColour &back)
 	Set the background colour of the main and additional selections and whether to use this setting. 
 
int 	GetSelAlpha () const
 	Get the alpha of the selection. 
 
void 	SetSelAlpha (int alpha)
 	Set the alpha of the selection. 
 
bool 	GetSelEOLFilled () const
 	Is the selection end of line filled? 
 
void 	SetSelEOLFilled (bool filled)
 	Set the selection to have its end of line filled or not. 
 
void 	SetCaretForeground (const wxColour &fore)
 	Set the foreground colour of the caret. 
 
void 	CmdKeyAssign (int key, int modifiers, int cmd)
 	When key+modifier combination km is pressed perform msg. 
 
void 	CmdKeyClear (int key, int modifiers)
 	When key+modifier combination km is pressed do nothing. 
 
void 	CmdKeyClearAll ()
 	Drop all key mappings. 
 
void 	SetStyleBytes (int length, char *styleBytes)
 	Set the styles for a segment of the document. 
 
void 	StyleSetVisible (int style, bool visible)
 	Set a style to be visible or not. 
 
int 	GetCaretPeriod () const
 	Get the time in milliseconds that the caret is on and off. 
 
void 	SetCaretPeriod (int periodMilliseconds)
 	Get the time in milliseconds that the caret is on and off. 
 
void 	SetWordChars (const wxString &characters)
 	Set the set of characters making up words for when moving or selecting by word. 
 
wxString 	GetWordChars () const
 	Get the set of characters making up words for when moving or selecting by word. 
 *)

void 	BeginUndoAction ()
void 	EndUndoAction ()

(* 
void 	IndicatorSetStyle (int indic, int style)
 	Set an indicator to plain, squiggle or TT. 
 
int 	IndicatorGetStyle (int indic) const
 	Retrieve the style of an indicator. 
 
void 	IndicatorSetForeground (int indic, const wxColour &fore)
 	Set the foreground colour of an indicator. 
 
wxColour 	IndicatorGetForeground (int indic) const
 	Retrieve the foreground colour of an indicator. 
 
void 	IndicatorSetUnder (int indic, bool under)
 	Set an indicator to draw under text or over(default). 
 
bool 	IndicatorGetUnder (int indic) const
 	Retrieve whether indicator drawn under or over text. 
 
void 	SetWhitespaceForeground (bool useSetting, const wxColour &fore)
 	Set the foreground colour of all whitespace and whether to use this setting. 
 
void 	SetWhitespaceBackground (bool useSetting, const wxColour &back)
 	Set the background colour of all whitespace and whether to use this setting. 
 
void 	SetWhitespaceSize (int size)
 	Set the size of the dots used to mark space characters. 
 
int 	GetWhitespaceSize () const
 	Get the size of the dots used to mark space characters. 
 
void 	SetStyleBits (int bits)
 	Divide each styling byte into lexical class bits (default: 5) and indicator bits (default: 3). 
 
int 	GetStyleBits () const
 	Retrieve number of bits in style bytes used to hold the lexical state. 
 
void 	SetLineState (int line, int state)
 	Used to hold extra styling information for each line. 
 
int 	GetLineState (int line) const
 	Retrieve the extra styling information for a line. 
 
int 	GetMaxLineState () const
 	Retrieve the last line number that has line state. 
 
bool 	GetCaretLineVisible () const
 	Is the background of the line containing the caret in a different colour? 
 
void 	SetCaretLineVisible (bool show)
 	Display the background of the line containing the caret in a different colour. 
 
wxColour 	GetCaretLineBackground () const
 	Get the colour of the background of the line containing the caret. 
 
void 	SetCaretLineBackground (const wxColour &back)
 	Set the colour of the background of the line containing the caret. 
 
void 	StyleSetChangeable (int style, bool changeable)
 	Set a style to be changeable or not (read only). 
 
void 	AutoCompShow (int lenEntered, const wxString &itemList)
 	Display a auto-completion list. 
 
void 	AutoCompCancel ()
 	Remove the auto-completion list from the screen. 
 
bool 	AutoCompActive ()
 	Is there an auto-completion list visible? 
 
int 	AutoCompPosStart ()
 	Retrieve the position of the caret when the auto-completion list was displayed. 
 
void 	AutoCompComplete ()
 	User has selected an item so remove the list and insert the selection. 
 
void 	AutoCompStops (const wxString &characterSet)
 	Define a set of character that when typed cancel the auto-completion list. 
 
void 	AutoCompSetSeparator (int separatorCharacter)
 	Change the separator character in the string setting up an auto-completion list. 
 
int 	AutoCompGetSeparator () const
 	Retrieve the auto-completion list separator character. 
 
void 	AutoCompSelect (const wxString &text)
 	Select the item in the auto-completion list that starts with a string. 
 
void 	AutoCompSetCancelAtStart (bool cancel)
 	Should the auto-completion list be cancelled if the user backspaces to a position before where the box was created. 
 
bool 	AutoCompGetCancelAtStart () const
 	Retrieve whether auto-completion cancelled by backspacing before start. 
 
void 	AutoCompSetFillUps (const wxString &characterSet)
 	Define a set of characters that when typed will cause the autocompletion to choose the selected item. 
 
void 	AutoCompSetChooseSingle (bool chooseSingle)
 	Should a single item auto-completion list automatically choose the item. 
 
bool 	AutoCompGetChooseSingle () const
 	Retrieve whether a single item auto-completion list automatically choose the item. 
 
void 	AutoCompSetIgnoreCase (bool ignoreCase)
 	Set whether case is significant when performing auto-completion searches. 
 
bool 	AutoCompGetIgnoreCase () const
 	Retrieve state of ignore case flag. 
 
void 	UserListShow (int listType, const wxString &itemList)
 	Display a list of strings and send notification when user chooses one. 
 
void 	AutoCompSetAutoHide (bool autoHide)
 	Set whether or not autocompletion is hidden automatically when nothing matches. 
 
bool 	AutoCompGetAutoHide () const
 	Retrieve whether or not autocompletion is hidden automatically when nothing matches. 
 
void 	AutoCompSetDropRestOfWord (bool dropRestOfWord)
 	Set whether or not autocompletion deletes any word characters after the inserted text upon completion. 
 
bool 	AutoCompGetDropRestOfWord () const
 	Retrieve whether or not autocompletion deletes any word characters after the inserted text upon completion. 
 
void 	RegisterImage (int type, const wxBitmap &bmp)
 	Register an image for use in autocompletion lists. 
 
void 	ClearRegisteredImages ()
 	Clear all the registered images. 
 
int 	AutoCompGetTypeSeparator () const
 	Retrieve the auto-completion list type-separator character. 
 
void 	AutoCompSetTypeSeparator (int separatorCharacter)
 	Change the type-separator character in the string setting up an auto-completion list. 
 
void 	AutoCompSetMaxWidth (int characterCount)
 	Set the maximum width, in characters, of auto-completion and user lists. 
 
int 	AutoCompGetMaxWidth () const
 	Get the maximum width, in characters, of auto-completion and user lists. 
 
void 	AutoCompSetMaxHeight (int rowCount)
 	Set the maximum height, in rows, of auto-completion and user lists. 
 
int 	AutoCompGetMaxHeight () const
 	Set the maximum height, in rows, of auto-completion and user lists. 
*)
 
void 	SetIndent (int indentSize)
int 	GetIndent () const
void 	SetUseTabs (bool useTabs)
bool 	GetUseTabs () const
void 	SetLineIndentation (int line, int indentSize)
int 	GetLineIndentation (int line) const
int 	GetLineIndentPosition (int line) const
int 	GetColumn (int pos) const

(*
 	Count characters between two positions. 
 
void 	SetUseHorizontalScrollBar (bool show)
 	Show or hide the horizontal scroll bar. 
 
bool 	GetUseHorizontalScrollBar () const
 	Is the horizontal scroll bar visible? 
 
void 	SetIndentationGuides (int indentView)
 	Show or hide indentation guides. 
 
int 	GetIndentationGuides () const
 	Are the indentation guides visible? 
 
void 	SetHighlightGuide (int column)
 	Set the highlighted indentation guide column. 
 
int 	GetHighlightGuide () const
 	Get the highlighted indentation guide column. 
 
int 	GetLineEndPosition (int line) const
 	Get the position after the last visible characters on a line. 
 
int 	GetCodePage () const
 	Get the code page used to interpret the bytes of the document as characters. 
 
wxColour 	GetCaretForeground () const
 	Get the foreground colour of the caret. 
 *)

bool 	GetReadOnly () const 
void 	SetCurrentPos (int pos)
void 	SetSelectionStart (int pos)
int 	GetSelectionStart () const
void 	SetSelectionEnd (int pos)
int 	GetSelectionEnd () const

(*
 
void 	SetEmptySelection (int pos)
 	Set caret to a position, while removing any existing selection. 
 
void 	SetPrintMagnification (int magnification)
 	Sets the print magnification added to the point size of each style for printing. 
 
int 	GetPrintMagnification () const
 	Returns the print magnification. 
 
void 	SetPrintColourMode (int mode)
 	Modify colours when printing for clearer printed text. 
 
int 	GetPrintColourMode () const
 	Returns the print colour mode. 
 
int 	FindText (int minPos, int maxPos, const wxString &text, int flags=0)
 	Find some text in the document. 
 
int 	FormatRange (bool doDraw, int startPos, int endPos, wxDC *draw, wxDC *target, wxRect renderRect, wxRect pageRect)
 	On Windows, will draw the document into a display context such as a printer. 
 
int 	GetFirstVisibleLine () const
 	Retrieve the display line at the top of the display. 
 
wxString 	GetLine (int line) const
 	Retrieve the contents of a line. 
 
int 	GetLineCount () const
 	Returns the number of lines in the document. 
 
void 	SetMarginLeft (int pixelWidth)
 	Sets the size in pixels of the left margin. 
 
int 	GetMarginLeft () const
 	Returns the size in pixels of the left margin. 
 
void 	SetMarginRight (int pixelWidth)
 	Sets the size in pixels of the right margin. 
 
int 	GetMarginRight () const
 	Returns the size in pixels of the right margin. 
 *)

bool 	GetModify () const
wxString 	GetSelectedText ()
wxString 	GetTextRange (int startPos, int endPos)
void 	HideSelection (bool normal)

int 	LineFromPosition (int pos) const
int 	PositionFromLine (int line) const
void 	LineScroll (int columns, int lines)
void 	EnsureCaretVisible ()
void 	ReplaceSelection (const wxString &text)
void 	SetReadOnly (bool readOnly)
bool 	CanPaste () const
bool 	CanUndo () const
void 	EmptyUndoBuffer ()
 
void 	Undo ()
void 	Cut ()
void 	Copy ()
void 	Paste ()
void 	Clear ()
void 	SetText (const wxString &text)
wxString 	GetText () const
int 	GetTextLength () const
void 	SetOvertype (bool overtype)

(*
 
bool 	GetOvertype () const
 	Returns true if overtype mode is active otherwise false is returned. 
 
void 	SetCaretWidth (int pixelWidth)
 	Set the width of the insert mode caret. 
 
int 	GetCaretWidth () const
 	Returns the width of the insert mode caret. 
 
void 	SetTargetStart (int pos)
 	Sets the position that starts the target which is used for updating the document without affecting the scroll position. 
 
int 	GetTargetStart () const
 	Get the position that starts the target. 
 
void 	SetTargetEnd (int pos)
 	Sets the position that ends the target which is used for updating the document without affecting the scroll position. 
 
int 	GetTargetEnd () const
 	Get the position that ends the target. 
 
int 	ReplaceTarget (const wxString &text)
 	Replace the target text with the argument text. 
 
int 	ReplaceTargetRE (const wxString &text)
 	Replace the target text with the argument text after processing. 
 
int 	SearchInTarget (const wxString &text)
 	Search for a counted string in the target and set the target to the found range. 
 
void 	SetSearchFlags (int flags)
 	Set the search flags used by SearchInTarget. 
 
int 	GetSearchFlags () const
 	Get the search flags used by SearchInTarget. 
 
void 	CallTipShow (int pos, const wxString &definition)
 	Show a call tip containing a definition near position pos. 
 
void 	CallTipCancel ()
 	Remove the call tip from the screen. 
 
bool 	CallTipActive ()
 	Is there an active call tip? 
 
int 	CallTipPosAtStart ()
 	Retrieve the position where the caret was before displaying the call tip. 
 
void 	CallTipSetHighlight (int start, int end)
 	Highlight a segment of the definition. 
 
void 	CallTipSetBackground (const wxColour &back)
 	Set the background colour for the call tip. 
 
void 	CallTipSetForeground (const wxColour &fore)
 	Set the foreground colour for the call tip. 
 
void 	CallTipSetForegroundHighlight (const wxColour &fore)
 	Set the foreground colour for the highlighted part of the call tip. 
 
void 	CallTipUseStyle (int tabSize)
 	Enable use of STYLE_CALLTIP and set call tip tab size in pixels. 
 
void 	CallTipSetPosition (bool above)
 	Set position of calltip, above or below text. 
 
int 	VisibleFromDocLine (int line)
 	Find the display line of a document line taking hidden lines into account. 
 
int 	DocLineFromVisible (int lineDisplay)
 	Find the document line of a display line taking hidden lines into account. 

*)
 
int 	WrapCount (int line)
void 	SetFoldLevel (int line, int level)
int 	GetFoldLevel (int line) const
int 	GetLastChild (int line, int level) const
int 	GetFoldParent (int line) const
void 	ShowLines (int lineStart, int lineEnd)
void 	HideLines (int lineStart, int lineEnd)
bool 	GetLineVisible (int line) const
void 	SetFoldExpanded (int line, bool expanded)
bool 	GetFoldExpanded (int line) const
void 	ToggleFold (int line)
void 	EnsureVisible (int line)

void 	SetFoldFlags (int flags)
void 	EnsureVisibleEnforcePolicy (int line)
void 	SetTabIndents (bool tabIndents)
bool 	GetTabIndents () const
void 	SetBackSpaceUnIndents (bool bsUnIndents)
bool 	GetBackSpaceUnIndents () const
void 	SetMouseDwellTime (int periodMilliseconds)
int 	GetMouseDwellTime () const
int 	WordStartPosition (int pos, bool onlyWordCharacters)
int 	WordEndPosition (int pos, bool onlyWordCharacters)
void 	SetWrapMode (int mode)
int 	GetWrapMode () const
void 	SetWrapVisualFlags (int wrapVisualFlags)
int 	GetWrapVisualFlags () const
void 	SetWrapVisualFlagsLocation (int wrapVisualFlagsLocation)

(*
 	Set the location of visual flags for wrapped lines. 
 
int 	GetWrapVisualFlagsLocation () const
 	Retrive the location of visual flags for wrapped lines. 
 
void 	SetWrapStartIndent (int indent)
 	Set the start indent for wrapped lines. 
 
int 	GetWrapStartIndent () const
 	Retrive the start indent for wrapped lines. 
 
void 	SetWrapIndentMode (int mode)
 	Sets how wrapped sublines are placed. 
 
int 	GetWrapIndentMode () const
 	Retrieve how wrapped sublines are placed. 
 
void 	SetLayoutCache (int mode)
 	Sets the degree of caching of layout information. 
 
int 	GetLayoutCache () const
 	Retrieve the degree of caching of layout information. 
 *)

void 	SetScrollWidth (int pixelWidth)
int 	GetScrollWidth () const
int 	TextWidth (int style, const wxString &text)
void 	SetEndAtLastLine (bool endAtLastLine)
bool 	GetEndAtLastLine () const
int 	TextHeight (int line)
void 	SetUseVerticalScrollBar (bool show)
bool 	GetUseVerticalScrollBar () const
void 	AppendText (const wxString &text)
bool 	GetTwoPhaseDraw () const
void 	SetTwoPhaseDraw (bool twoPhase)
void 	TargetFromSelection ()
void 	LinesJoin ()
void 	LinesSplit (int pixelWidth)
void 	SetFoldMarginColour (bool useSetting, const wxColour &back)
void 	SetFoldMarginHiColour (bool useSetting, const wxColour &fore)
void 	LineDown ()
void 	LineDownExtend ()
void 	LineUp ()
void 	LineUpExtend ()
void 	CharLeft ()
void 	CharLeftExtend ()


(*
 
void 	CharRight ()
 	Move caret right one character. 
 
void 	CharRightExtend ()
 	Move caret right one character extending selection to new caret position. 
 
void 	WordLeft ()
 	Move caret left one word. 
 
void 	WordLeftExtend ()
 	Move caret left one word extending selection to new caret position. 
 
void 	WordRight ()
 	Move caret right one word. 
 
void 	WordRightExtend ()
 	Move caret right one word extending selection to new caret position. 
 
void 	Home ()
 	Move caret to first position on line. 
 
void 	HomeExtend ()
 	Move caret to first position on line extending selection to new caret position. 
 
void 	LineEnd ()
 	Move caret to last position on line. 
 
void 	LineEndExtend ()
 	Move caret to last position on line extending selection to new caret position. 
 
void 	DocumentStart ()
 	Move caret to first position in document. 
 
void 	DocumentStartExtend ()
 	Move caret to first position in document extending selection to new caret position. 
 
void 	DocumentEnd ()
 	Move caret to last position in document. 
 
void 	DocumentEndExtend ()
 	Move caret to last position in document extending selection to new caret position. 
 
void 	PageUp ()
 	Move caret one page up. 
 
void 	PageUpExtend ()
 	Move caret one page up extending selection to new caret position. 
 
void 	PageDown ()
 	Move caret one page down. 
 
void 	PageDownExtend ()
 	Move caret one page down extending selection to new caret position. 
 
void 	EditToggleOvertype ()
 	Switch from insert to overtype mode or the reverse. 
 
void 	Cancel ()
 	Cancel any modes such as call tip or auto-completion list display. 
 
void 	DeleteBack ()
 	Delete the selection or if no selection, the character before the caret. 
 
void 	Tab ()
 	If selection is empty or all on one line replace the selection with a tab character. 
 
void 	BackTab ()
 	Dedent the selected lines. 
 
void 	NewLine ()
 	Insert a new line, may use a CRLF, CR or LF depending on EOL mode. 
 
void 	FormFeed ()
 	Insert a Form Feed character. 
 
void 	VCHome ()
 	Move caret to before first visible character on line. 
 
void 	VCHomeExtend ()
 	Like VCHome but extending selection to new caret position. 
 
void 	ZoomIn ()
 	Magnify the displayed text by increasing the sizes by 1 point. 
 
void 	ZoomOut ()
 	Make the displayed text smaller by decreasing the sizes by 1 point. 
 
void 	DelWordLeft ()
 	Delete the word to the left of the caret. 
 
void 	DelWordRight ()
 	Delete the word to the right of the caret. 
 
void 	DelWordRightEnd ()
 	Delete the word to the right of the caret, but not the trailing non-word characters. 
 
void 	LineCut ()
 	Cut the line containing the caret. 
 
void 	LineDelete ()
 	Delete the line containing the caret. 
 
void 	LineTranspose ()
 	Switch the current line with the previous. 
 
void 	LineDuplicate ()
 	Duplicate the current line. 
 
void 	LowerCase ()
 	Transform the selection to lower case. 
 
void 	UpperCase ()
 	Transform the selection to upper case. 
 
void 	LineScrollDown ()
 	Scroll the document down, keeping the caret visible. 
 
void 	LineScrollUp ()
 	Scroll the document up, keeping the caret visible. 
 
void 	DeleteBackNotLine ()
 	Delete the selection or if no selection, the character before the caret. 
 
void 	HomeDisplay ()
 	Move caret to first position on display line. 
 
void 	HomeDisplayExtend ()
 	Move caret to first position on display line extending selection to new caret position. 
 
void 	LineEndDisplay ()
 	Move caret to last position on display line. 
 
void 	LineEndDisplayExtend ()
 	Move caret to last position on display line extending selection to new caret position. 
 
void 	HomeWrap ()
 	These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)? except they behave differently when word-wrap is enabled: They go first to the start / end of the display line, like (Home|LineEnd)Display The difference is that, the cursor is already at the point, it goes on to the start or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?. 
 
void 	HomeWrapExtend ()
 
void 	LineEndWrap ()
 
void 	LineEndWrapExtend ()
 
void 	VCHomeWrap ()
 
void 	VCHomeWrapExtend ()
 
void 	LineCopy ()
 	Copy the line containing the caret. 
*)
 
void 	MoveCaretInsideView ()
int 	LineLength (int line) const
void 	BraceHighlight (int pos1, int pos2)
void 	BraceBadLight (int pos)
int 	BraceMatch (int pos)
bool 	GetViewEOL () const
void 	SetViewEOL (bool visible)

(*
 
void * 	GetDocPointer ()
 	Retrieve a pointer to the document object. 
 
void 	SetDocPointer (void *docPointer)
 	Change the document object used. 
 
void 	SetModEventMask (int mask)
 	Set which document modification events are sent to the container. 
 
int 	GetEdgeColumn () const
 	Retrieve the column number which text should be kept within. 
 
void 	SetEdgeColumn (int column)
 	Set the column number of the edge. 
 
int 	GetEdgeMode () const
 	Retrieve the edge highlight mode. 
 
void 	SetEdgeMode (int mode)
 	The edge may be displayed by a line (EDGE_LINE) or by highlighting text that goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE). 
 
wxColour 	GetEdgeColour () const
 	Retrieve the colour used in edge indication. 
 
void 	SetEdgeColour (const wxColour &edgeColour)
 	Change the colour used in edge indication. 
 
void 	SearchAnchor ()
 	Sets the current caret position to be the search anchor. 
 
int 	SearchNext (int flags, const wxString &text)
 	Find some text starting at the search anchor. 
 
int 	SearchPrev (int flags, const wxString &text)
 	Find some text starting at the search anchor and moving backwards. 
 
int 	LinesOnScreen () const
 	Retrieves the number of lines completely visible. 
 
void 	UsePopUp (bool allowPopUp)
 	Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button. 
 
bool 	SelectionIsRectangle () const
 	Is the selection rectangular? The alternative is the more common stream selection. 
 
void 	SetZoom (int zoom)
 	Set the zoom level. 
 
int 	GetZoom () const
 	Retrieve the zoom level. 
 
void * 	CreateDocument ()
 	Create a new document object. 
 
void 	AddRefDocument (void *docPointer)
 	Extend life of document. 
 
void 	ReleaseDocument (void *docPointer)
 	Release a reference to the document, deleting document if it fades to black. 
 
int 	GetModEventMask () const
 	Get which document modification events are sent to the container. 
 
void 	SetSTCFocus (bool focus)
 	Change internal focus flag. 
 
bool 	GetSTCFocus () const
 	Get internal focus flag. 
 
void 	SetStatus (int statusCode)
 	Change error status - 0 = OK. 
 
int 	GetStatus () const
 	Get error status. 
 
void 	SetMouseDownCaptures (bool captures)
 	Set whether the mouse is captured when its button is pressed. 
 
bool 	GetMouseDownCaptures () const
 	Get whether mouse gets captured. 
 
void 	SetSTCCursor (int cursorType)
 	Sets the cursor to one of the SC_CURSOR* values. 
 
int 	GetSTCCursor () const
 	Get cursor type. 
 
void 	SetControlCharSymbol (int symbol)
 	Change the way control characters are displayed: If symbol is < 32, keep the drawn way, else, use the given character. 
 
int 	GetControlCharSymbol () const
 	Get the way control characters are displayed. 
 
void 	WordPartLeft ()
 	Move to the previous change in capitalisation. 
 
void 	WordPartLeftExtend ()
 	Move to the previous change in capitalisation extending selection to new caret position. 
 
void 	WordPartRight ()
 	Move to the change next in capitalisation. 
 
void 	WordPartRightExtend ()
 	Move to the next change in capitalisation extending selection to new caret position. 
 
void 	SetVisiblePolicy (int visiblePolicy, int visibleSlop)
 	Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc. 
 
void 	DelLineLeft ()
 	Delete back from the current position to the start of the line. 
 
void 	DelLineRight ()
 	Delete forwards from the current position to the end of the line. 
 
void 	SetXOffset (int newOffset)
 	Get and Set the xOffset (ie, horizontal scroll position). 
 
int 	GetXOffset () const
 
void 	ChooseCaretX ()
 	Set the last x chosen value to be the caret x position. 
 
void 	SetXCaretPolicy (int caretPolicy, int caretSlop)
 	Set the way the caret is kept visible when going sideways. 
 
void 	SetYCaretPolicy (int caretPolicy, int caretSlop)
 	Set the way the line the caret is on is kept visible. 
 
void 	SetPrintWrapMode (int mode)
 	Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE). 
 
int 	GetPrintWrapMode () const
 	Is printing line wrapped? 
 
void 	SetHotspotActiveForeground (bool useSetting, const wxColour &fore)
 	Set a fore colour for active hotspots. 
 
wxColour 	GetHotspotActiveForeground () const
 	Get the fore colour for active hotspots. 
 
void 	SetHotspotActiveBackground (bool useSetting, const wxColour &back)
 	Set a back colour for active hotspots. 
 
wxColour 	GetHotspotActiveBackground () const
 	Get the back colour for active hotspots. 
 
void 	SetHotspotActiveUnderline (bool underline)
 	Enable / Disable underlining active hotspots. 
 
bool 	GetHotspotActiveUnderline () const
 	Get whether underlining for active hotspots. 
 
void 	SetHotspotSingleLine (bool singleLine)
 	Limit hotspots to single line so hotspots on two lines don't merge. 
 
bool 	GetHotspotSingleLine () const
 	Get the HotspotSingleLine property. 
 
void 	ParaDown ()
 	Move caret between paragraphs (delimited by empty lines). 
 
void 	ParaDownExtend ()
 
void 	ParaUp ()
 
void 	ParaUpExtend ()
 
int 	PositionBefore (int pos)
 	Given a valid document position, return the previous position taking code page into account. 
 
int 	PositionAfter (int pos)
 	Given a valid document position, return the next position taking code page into account. 
 
void 	CopyRange (int start, int end)
 	Copy a range of text to the clipboard. 
 
void 	CopyText (int length, const wxString &text)
 	Copy argument text to the clipboard. 
 
void 	SetSelectionMode (int mode)
 	Set the selection mode to stream (SC_SEL_STREAM) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or by lines (SC_SEL_LINES). 
 
int 	GetSelectionMode () const
 	Get the mode of the current selection. 
 
int 	GetLineSelStartPosition (int line)
 	Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line). 
 
int 	GetLineSelEndPosition (int line)
 	Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line). 
 
void 	LineDownRectExtend ()
 	Move caret down one line, extending rectangular selection to new caret position. 
 
void 	LineUpRectExtend ()
 	Move caret up one line, extending rectangular selection to new caret position. 
 
void 	CharLeftRectExtend ()
 	Move caret left one character, extending rectangular selection to new caret position. 
 
void 	CharRightRectExtend ()
 	Move caret right one character, extending rectangular selection to new caret position. 
 
void 	HomeRectExtend ()
 	Move caret to first position on line, extending rectangular selection to new caret position. 
 
void 	VCHomeRectExtend ()
 	Move caret to before first visible character on line. 
 
void 	LineEndRectExtend ()
 	Move caret to last position on line, extending rectangular selection to new caret position. 
 
void 	PageUpRectExtend ()
 	Move caret one page up, extending rectangular selection to new caret position. 
 
void 	PageDownRectExtend ()
 	Move caret one page down, extending rectangular selection to new caret position. 
 
void 	StutteredPageUp ()
 	Move caret to top of page, or one page up if already at top of page. 
 
void 	StutteredPageUpExtend ()
 	Move caret to top of page, or one page up if already at top of page, extending selection to new caret position. 
 
void 	StutteredPageDown ()
 	Move caret to bottom of page, or one page down if already at bottom of page. 
 
void 	StutteredPageDownExtend ()
 	Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position. 
 
void 	WordLeftEnd ()
 	Move caret left one word, position cursor at end of word. 
 
void 	WordLeftEndExtend ()
 	Move caret left one word, position cursor at end of word, extending selection to new caret position. 
 
void 	WordRightEnd ()
 	Move caret right one word, position cursor at end of word. 
 
void 	WordRightEndExtend ()
 	Move caret right one word, position cursor at end of word, extending selection to new caret position. 
 
void 	SetWhitespaceChars (const wxString &characters)
 	Set the set of characters making up whitespace for when moving or selecting by word. 
 
wxString 	GetWhitespaceChars () const
 	Get the set of characters making up whitespace for when moving or selecting by word. 
 
void 	SetPunctuationChars (const wxString &characters)
 	Set the set of characters making up punctuation characters Should be called after SetWordChars. 
 
wxString 	GetPunctuationChars () const
 	Get the set of characters making up punctuation characters. 
 
void 	SetCharsDefault ()
 	Reset the set of characters for whitespace and word characters to the defaults. 
 
int 	AutoCompGetCurrent () const
 	Get currently selected item position in the auto-completion list. 
 
void 	AutoCompSetCaseInsensitiveBehaviour (int behaviour)
 	Set auto-completion case insensitive behaviour to either prefer case-sensitive matches or have no preference. 
 
int 	AutoCompGetCaseInsensitiveBehaviour () const
 	Get auto-completion case insensitive behaviour. 
 
void 	Allocate (int bytes)
 	Enlarge the document to a particular size of text bytes. 
 
int 	FindColumn (int line, int column)
 	Find the position of a column on a line taking into account tabs and multi-byte characters. 
 
int 	GetCaretSticky () const
 	Can the caret preferred x position only be changed by explicit movement commands? 
 
void 	SetCaretSticky (int useCaretStickyBehaviour)
 	Stop the caret preferred x position changing when the user types. 
 
void 	ToggleCaretSticky ()
 	Switch between sticky and non-sticky: meant to be bound to a key. 
 
void 	SetPasteConvertEndings (bool convert)
 	Enable/Disable convert-on-paste for line endings. 
 
bool 	GetPasteConvertEndings () const
 	Get convert-on-paste setting. 
 
void 	SelectionDuplicate ()
 	Duplicate the selection. 
 
void 	SetCaretLineBackAlpha (int alpha)
 	Set background alpha of the caret line. 
 
int 	GetCaretLineBackAlpha () const
 	Get the background alpha of the caret line. 
 
void 	SetCaretStyle (int caretStyle)
 	Set the style of the caret to be drawn. 
 
int 	GetCaretStyle () const
 	Returns the current style of the caret. 
 
void 	SetIndicatorCurrent (int indicator)
 	Set the indicator used for IndicatorFillRange and IndicatorClearRange. 
 
int 	GetIndicatorCurrent () const
 	Get the current indicator. 
 
void 	SetIndicatorValue (int value)
 	Set the value used for IndicatorFillRange. 
 
int 	GetIndicatorValue () const
 	Get the current indicator value. 
 
void 	IndicatorFillRange (int position, int fillLength)
 	Turn a indicator on over a range. 
 
void 	IndicatorClearRange (int position, int clearLength)
 	Turn a indicator off over a range. 
 
int 	IndicatorAllOnFor (int position)
 	Are any indicators present at position? 
 
int 	IndicatorValueAt (int indicator, int position)
 	What value does a particular indicator have at at a position? 
 
int 	IndicatorStart (int indicator, int position)
 	Where does a particular indicator start? 
 
int 	IndicatorEnd (int indicator, int position)
 	Where does a particular indicator end? 
 
void 	SetPositionCacheSize (int size)
 	Set number of entries in position cache. 
 
int 	GetPositionCacheSize () const
 	How many entries are allocated to the position cache? 
 
void 	CopyAllowLine ()
 	Copy the selection, if selection empty copy the line with the caret. 
 
const char * 	GetCharacterPointer () const
 	Compact the document buffer and return a read-only pointer to the characters in the document. 
 
const char * 	GetRangePointer (int position, int rangeLength) const
 	Return a read-only pointer to a range of characters in the document. 
 
int 	GetGapPosition () const
 	Return a position which, to avoid performance costs, should not be within the range of a call to GetRangePointer. 
 
void 	SetKeysUnicode (bool keysUnicode)
 	Always interpret keyboard input as Unicode. 
 
bool 	GetKeysUnicode () const
 	Are keys always interpreted as Unicode? 
 
void 	IndicatorSetAlpha (int indicator, int alpha)
 	Set the alpha fill colour of the given indicator. 
 
int 	IndicatorGetAlpha (int indicator) const
 	Get the alpha fill colour of the given indicator. 
 
void 	IndicatorSetOutlineAlpha (int indicator, int alpha)
 	Set the alpha outline colour of the given indicator. 
 
int 	IndicatorGetOutlineAlpha (int indicator) const
 	Get the alpha outline colour of the given indicator. 
 
void 	SetExtraAscent (int extraAscent)
 	Set extra ascent for each line. 
 
int 	GetExtraAscent () const
 	Get extra ascent for each line. 
 
void 	SetExtraDescent (int extraDescent)
 	Set extra descent for each line. 
 
int 	GetExtraDescent () const
 	Get extra descent for each line. 
 
int 	GetMarkerSymbolDefined (int markerNumber)
 	Which symbol was defined for markerNumber with MarkerDefine. 
 
void 	MarginSetText (int line, const wxString &text)
 	Set the text in the text margin for a line. 
 
wxString 	MarginGetText (int line) const
 	Get the text in the text margin for a line. 
 
void 	MarginSetStyle (int line, int style)
 	Set the style number for the text margin for a line. 
 
int 	MarginGetStyle (int line) const
 	Get the style number for the text margin for a line. 
 
void 	MarginSetStyles (int line, const wxString &styles)
 	Set the style in the text margin for a line. 
 
wxString 	MarginGetStyles (int line) const
 	Get the styles in the text margin for a line. 
 
void 	MarginTextClearAll ()
 	Clear the margin text on all lines. 
 
void 	MarginSetStyleOffset (int style)
 	Get the start of the range of style numbers used for margin text. 
 
int 	MarginGetStyleOffset () const
 	Get the start of the range of style numbers used for margin text. 
 
void 	SetMarginOptions (int marginOptions)
 	Set the margin options. 
 
int 	GetMarginOptions () const
 	Get the margin options. 
 
void 	AnnotationSetText (int line, const wxString &text)
 	Set the annotation text for a line. 
 
wxString 	AnnotationGetText (int line) const
 	Get the annotation text for a line. 
 
void 	AnnotationSetStyle (int line, int style)
 	Set the style number for the annotations for a line. 
 
int 	AnnotationGetStyle (int line) const
 	Get the style number for the annotations for a line. 
 
void 	AnnotationSetStyles (int line, const wxString &styles)
 	Set the annotation styles for a line. 
 
wxString 	AnnotationGetStyles (int line) const
 	Get the annotation styles for a line. 
 
int 	AnnotationGetLines (int line) const
 	Get the number of annotation lines for a line. 
 
void 	AnnotationClearAll ()
 	Clear the annotations from all lines. 
 
void 	AnnotationSetVisible (int visible)
 	Set the visibility for the annotations for a view. 
 
int 	AnnotationGetVisible () const
 	Get the visibility for the annotations for a view. 
 
void 	AnnotationSetStyleOffset (int style)
 	Get the start of the range of style numbers used for annotations. 
 
int 	AnnotationGetStyleOffset () const
 	Get the start of the range of style numbers used for annotations. 
 
void 	AddUndoAction (int token, int flags)
 	Add a container action to the undo stack. 
 
int 	CharPositionFromPoint (int x, int y)
 	Find the position of a character from a point within the window. 
 
int 	CharPositionFromPointClose (int x, int y)
 	Find the position of a character from a point within the window. 
 
void 	SetMultipleSelection (bool multipleSelection)
 	Set whether multiple selections can be made. 
 
bool 	GetMultipleSelection () const
 	Whether multiple selections can be made. 
 
void 	SetAdditionalSelectionTyping (bool additionalSelectionTyping)
 	Set whether typing can be performed into multiple selections. 
 
bool 	GetAdditionalSelectionTyping () const
 	Whether typing can be performed into multiple selections. 
 
void 	SetAdditionalCaretsBlink (bool additionalCaretsBlink)
 	Set whether additional carets will blink. 
 
bool 	GetAdditionalCaretsBlink () const
 	Whether additional carets will blink. 
 
void 	SetAdditionalCaretsVisible (bool additionalCaretsBlink)
 	Set whether additional carets are visible. 
 
bool 	GetAdditionalCaretsVisible () const
 	Whether additional carets are visible. 
 
int 	GetSelections () const
 	How many selections are there? 
 
void 	ClearSelections ()
 	Clear selections to a single empty stream selection. 
 
int 	AddSelection (int caret, int anchor)
 	Add a selection. 
 
void 	SetMainSelection (int selection)
 	Set the main selection. 
 
int 	GetMainSelection () const
 	Which selection is the main selection. 
 
void 	SetSelectionNCaret (int selection, int pos)
 
int 	GetSelectionNCaret (int selection) const
 
void 	SetSelectionNAnchor (int selection, int posAnchor)
 
int 	GetSelectionNAnchor (int selection) const
 
void 	SetSelectionNCaretVirtualSpace (int selection, int space)
 
int 	GetSelectionNCaretVirtualSpace (int selection) const
 
void 	SetSelectionNAnchorVirtualSpace (int selection, int space)
 
int 	GetSelectionNAnchorVirtualSpace (int selection) const
 
void 	SetSelectionNStart (int selection, int pos)
 	Sets the position that starts the selection - this becomes the anchor. 
 
int 	GetSelectionNStart (int selection) const
 	Returns the position at the start of the selection. 
 
void 	SetSelectionNEnd (int selection, int pos)
 	Sets the position that ends the selection - this becomes the currentPosition. 
 
int 	GetSelectionNEnd (int selection) const
 	Returns the position at the end of the selection. 
 
void 	SetRectangularSelectionCaret (int pos)
 
int 	GetRectangularSelectionCaret () const
 
void 	SetRectangularSelectionAnchor (int posAnchor)
 
int 	GetRectangularSelectionAnchor () const
 
void 	SetRectangularSelectionCaretVirtualSpace (int space)
 
int 	GetRectangularSelectionCaretVirtualSpace () const
 
void 	SetRectangularSelectionAnchorVirtualSpace (int space)
 
int 	GetRectangularSelectionAnchorVirtualSpace () const
 
void 	SetVirtualSpaceOptions (int virtualSpaceOptions)
 
int 	GetVirtualSpaceOptions () const
 
void 	SetRectangularSelectionModifier (int modifier)
 	On GTK+, allow selecting the modifier key to use for mouse-based rectangular selection. 
 
int 	GetRectangularSelectionModifier () const
 	Get the modifier key used for rectangular selection. 
 
void 	SetAdditionalSelForeground (const wxColour &fore)
 	Set the foreground colour of additional selections. 
 
void 	SetAdditionalSelBackground (const wxColour &back)
 	Set the background colour of additional selections. 
 
void 	SetAdditionalSelAlpha (int alpha)
 	Set the alpha of the selection. 
 
int 	GetAdditionalSelAlpha () const
 	Get the alpha of the selection. 
 
void 	SetAdditionalCaretForeground (const wxColour &fore)
 	Set the foreground colour of additional carets. 
 
wxColour 	GetAdditionalCaretForeground () const
 	Get the foreground colour of additional carets. 
 
void 	RotateSelection ()
 	Set the main selection to the next selection. 
 
void 	SwapMainAnchorCaret ()
 	Swap that caret and anchor of the main selection. 
 
int 	ChangeLexerState (int start, int end)
 	Indicate that the internal state of a lexer has changed over a range and therefore there may be a need to redraw. 
 
int 	ContractedFoldNext (int lineStart)
 	Find the next line at or after lineStart that is a contracted fold header line. 
 
void 	VerticalCentreCaret ()
 	Centre current line in window. 
 
void 	MoveSelectedLinesUp ()
 	Move the selected lines up one line, shifting the line above after the selection. 
 
void 	MoveSelectedLinesDown ()
 	Move the selected lines down one line, shifting the line below before the selection. 
 
void 	SetIdentifier (int identifier)
 	Set the identifier reported as idFrom in notification messages. 
 
int 	GetIdentifier () const
 	Get the identifier. 
 
void 	RGBAImageSetWidth (int width)
 	Set the width for future RGBA image data. 
 
void 	RGBAImageSetHeight (int height)
 	Set the height for future RGBA image data. 
 
void 	MarkerDefineRGBAImage (int markerNumber, const unsigned char *pixels)
 	Define a marker from RGBA data. 
 
void 	RegisterRGBAImage (int type, const unsigned char *pixels)
 	Register an RGBA image for use in autocompletion lists. 
 
void 	ScrollToStart ()
 	Scroll to start of document. 
 
void 	ScrollToEnd ()
 	Scroll to end of document. 
 
void 	SetTechnology (int technology)
 	Set the technology used. 
 
int 	GetTechnology () const
 	Get the tech. 
 
void * 	CreateLoader (int bytes) const
 	Create an ILoader*. 
 
void 	StartRecord ()
 	Start notifying the container of all key presses and commands. 
 
void 	StopRecord ()
 	Stop notifying the container of all key presses and commands. 
 *)

void 	SetLexer (int lexer)

(*
 	Set the lexing language of the document. 

 
int 	GetLexer () const
 	Retrieve the lexing language of the document. 
 
void 	Colourise (int start, int end)
 	Colourise a segment of the document using the current lexing language. 
 *)

void 	SetProperty (const wxString &key, const wxString &value)


(*
 	Set up a value that may be used by a lexer for some optional feature. 
 
void 	SetKeyWords (int keywordSet, const wxString &keyWords)
 	Set up the key words used by the lexer. 
 
void 	SetLexerLanguage (const wxString &language)
 	Set the lexing language of the document based on string name. 
 
wxString 	GetProperty (const wxString &key)
 	Retrieve a 'property' value previously set with SetProperty. 
 
wxString 	GetPropertyExpanded (const wxString &key)
 	Retrieve a 'property' value previously set with SetProperty, with '$()' variable replacement on returned buffer. 
 
int 	GetPropertyInt (const wxString &key) const
 	Retrieve a 'property' value previously set with SetProperty, interpreted as an int AFTER any '$()' variable replacement. 
 
int 	GetStyleBitsNeeded () const
 	Retrieve the number of bits the current lexer needs for styling. 
 
void * 	PrivateLexerCall (int operation, void *pointer)
 	For private communication between an application and a known lexer. 
 
wxString 	PropertyNames () const
 	Retrieve a '
' separated list of properties understood by the current lexer. 
 
int 	PropertyType (const wxString &name)
 	Retrieve the type of a property. 
 
wxString 	DescribeProperty (const wxString &name) const
 	Describe a property. 
 
wxString 	DescribeKeyWordSets () const
 	Retrieve a '
' separated list of descriptions of the keyword sets understood by the current lexer. 
 *)

int 	GetCurrentLine ()

void 	StyleSetSpec (int styleNum, const wxString &spec)
void 	StyleSetFont (int styleNum, wxFont &font)

(*
 
void 	StyleSetFontAttr (int styleNum, int size, const wxString &faceName, bool bold, bool italic, bool underline, wxFontEncoding encoding=wxFONTENCODING_DEFAULT)
 	Set all font style attributes at once. 
 
void 	StyleSetCharacterSet (int style, int characterSet)
 	Set the character set of the font in a style. 
 
void 	StyleSetFontEncoding (int style, wxFontEncoding encoding)
 	Set the font encoding to be used by a style. 
 *)

void 	CmdKeyExecute (int cmd)
void 	SetMargins (int left, int right)
wxPoint 	PointFromPosition (int pos)

(*
 
void 	ScrollToLine (int line)
 	Scroll enough to make the given line visible. 
 
void 	ScrollToColumn (int column)
 	Scroll enough to make the given column visible. 
 
wxIntPtr 	SendMsg (int msg, wxUIntPtr wp=0, wxIntPtr lp=0) const
 	Send a message to Scintilla. 
 
void 	SetVScrollBar (wxScrollBar *bar)
 	Set the vertical scrollbar to use instead of the ont that's built-in. 
 
void 	SetHScrollBar (wxScrollBar *bar)
 	Set the horizontal scrollbar to use instead of the ont that's built-in. 
 
bool 	GetLastKeydownProcessed ()
 	Can be used to prevent the EVT_CHAR handler from adding the char. 
 
void 	SetLastKeydownProcessed (bool val)
*)
 
bool 	SaveFile (const wxString &filename)
bool 	LoadFile (const wxString &filename)

(*
 	Load the contents of filename into the editor. 
 
wxDragResult 	DoDragOver (wxCoord x, wxCoord y, wxDragResult defaultRes)
 	Allow for simulating a DnD DragOver. 
 
bool 	DoDropText (long x, long y, const wxString &data)
 	Allow for simulating a DnD DropText. 
 
void 	AnnotationClearLine (int line)
 	Clear annotations from the given line. 
 
void 	AddTextRaw (const char *text, int length=-1)
 	Add text to the document at current position. 
 
void 	InsertTextRaw (int pos, const char *text)
 	Insert string at a position. 
 
wxCharBuffer 	GetCurLineRaw (int *linePos=NULL)
 	Retrieve the text of the line containing the caret. 
 
wxCharBuffer 	GetLineRaw (int line)
 	Retrieve the contents of a line. 
 
wxCharBuffer 	GetSelectedTextRaw ()
 	Retrieve the selected text. 
 
wxCharBuffer 	GetTextRangeRaw (int startPos, int endPos)
 	Retrieve a range of text. 
 
void 	SetTextRaw (const char *text)
 	Replace the contents of the document with the argument text. 
 
wxCharBuffer 	GetTextRaw ()
 	Retrieve all the text in the document. 
 
void 	AppendTextRaw (const char *text, int length=-1)
 	Append a string to the end of the document without changing the selection. 
 
virtual void 	WriteText (const wxString &text)
 	Writes the text into the text control at the current insertion position. 
 
virtual void 	Remove (long from, long to)
 	Removes the text starting at the first given position up to (but not including) the character at the last position. 
 
virtual void 	Replace (long from, long to, const wxString &text)
 	Replaces the text starting at the first position up to (but not including) the character at the last position with the given text. 
 
virtual void 	SetInsertionPoint (long pos)
 	Sets the insertion point at the given position. 
 
virtual long 	GetInsertionPoint () const
 	Returns the insertion point, or cursor, position. 
 
virtual long 	GetLastPosition () const
 	Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control. 
 *)

virtual void 	SetSelection (int from, long to)
virtual void 	GetSelection (int <- from, int <- to) const


(*
virtual bool 	SetStyle (long start, long end, const wxTextAttr &style)
 
virtual bool 	GetStyle (long position, wxTextAttr &style)
 
virtual bool 	SetDefaultStyle (const wxTextAttr &style)
 
virtual long 	XYToPosition (long x, long y) const
 
virtual bool 	PositionToXY (long pos, long *x, long *y) const
 
virtual void 	ShowPosition (long pos)
 
virtual wxTextCtrlHitTestResult 	HitTest (const wxPoint &pt, long *pos) const
 
virtual wxTextCtrlHitTestResult 	HitTest (const wxPoint &pt, wxTextCoord *col, wxTextCoord *row) const
 *)


version 2.9 begin
  void 	SetMarginCursor (int margin, int cursor)
  bool 	GetAllLinesVisible () const
  void 	DeleteRange (int pos, int deleteLength)
  int 	CountCharacters (int startPos, int endPos)
  void 	SetMultiPaste (int multiPaste)
  int 	GetMultiPaste () const
  void 	SetFirstVisibleLine (int lineDisplay)
  wxString 	GetTag (int tagNumber) const
  bool 	GetScrollWidthTracking () const
  void 	SetScrollWidthTracking (bool tracking)
  virtual void 	MarkDirty ()
  virtual bool 	IsModified () const
  virtual void 	DiscardEdits ()
  virtual int 	GetLineLength (long n) const
  virtual bool 	IsEditable () const
  virtual void 	SetEditable (bool editable)
  virtual int 	GetNumberOfLines () const
  virtual void 	SelectNone ()
  virtual wxString 	GetLineText (long n) const
  void 	BraceHighlightIndicator (bool useBraceHighlightIndicator, int indicator)
  void 	BraceBadLightIndicator (bool useBraceBadLightIndicator, int indicator)
  int 	GetMarginCursor (int margin) const
  wxFont 	StyleGetFont (int style)
end

end

